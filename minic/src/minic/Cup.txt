package minic;
import java_cup.runtime.*;
import java.io.FileReader;

/* Codigo de nuestro parser */
parser code {:
    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append("Sintactico: simbolo: " + s.value.toString()+ " no reconocido.");
            if (s.left >= 0) {                
                m.append(" linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
            Sintaxis asin = new Sintaxis(
                    new Lexer( new FileReader(args[0])));
            Object result = asin.parse().value;            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
:};

/* ------------Declaracion de simbolos terminales y no terminales---------- *

/*--------------TERMINALES-----------*/
terminal VOID, INT, DOUBLE, BOOL, STRING, CLASS, INTERFACE, NULL, THIS, EXTENDS, IMPLEMENTS, FOR, WHILE, IF, ELSE, RETURN, BREAK, NEW, NEWARRAY, PRINT, READINTEGER, READLINE, MALLOC, IDENT, GETBYTE, SETBYTE, PLUS, MINUS, TIMES, DIV, MOD, LESS, LESSEQ, GREATER, GREATEREQ, EQUALS, EQTO, NOTEQ, AMPERSONS, OR, EXCLAM, SEMI, COMMA, PERIOD, LCOR, RCOR, LPAR, RPAR, LLLAV, RLLAV, CORS, PARS, LLAVS;
terminal Object intConstant, doubleConstant, boolConstant, stringConstant, hexConstant;

/*--------------NO TERMINALES-----------*/
non terminal  Program, Decl, VariableDecl, Variable, Type, FunctionDecl, Formals, ClassDecl, Field, InterfaceDecl, Prototype, StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, ReturnStmt, BreakStmt, PrintStmt, Expr, LValue, Call, LibCall, Actuals, Constant, Ext, Imp, ImpID, ProtCont, FuncCont, StmtVar, StmtStmt, StmtExpr, ExprPrint, ElseIfStmt, ClassField, InterfaceProt, CallCont,FormalsCont;

/*--------------PRECEDENCIAS-----------*/
precedence left EQUALS;
precedence left PLUS, MINUS, TIMES, DIV, MOD;
precedence left LESS, LESSEQ, GREATER, GREATEREQ, EQTO, NOTEQ, AMPERSONS, OR, EXCLAM ;
precedence left ELSE;
precedence left IDENT;
/* -------------------GRAMATICA FORMAL------------------------ */

Program ::= Program Decl
| /* ε */ ;

Decl ::= VariableDecl
| FunctionDecl
| ClassDecl
| InterfaceDecl
| error SEMI
| error RLLAV ;

VariableDecl ::= Variable SEMI ;

Variable ::= Type IDENT ;

Type ::= INT
| DOUBLE
| BOOL
| STRING
| IDENT
| Type CORS ;

FunctionDecl ::= Type FuncCont
| VOID FuncCont ;

FuncCont ::= IDENT LPAR Formals RPAR StmtBlock ;

Formals ::= FormalsCont Variable
| /* ε */ ;

FormalsCont ::= FormalsCont Variable COMMA
| /* ε */ ;

ClassDecl ::= CLASS IDENT Ext Imp LLLAV ClassField RLLAV ;

Ext ::= EXTENDS IDENT
| /* ε */ ;

Imp ::= IMPLEMENTS ImpID
| /* ε */ ;

ImpID ::= ImpID COMMA IDENT
| IDENT ;

ClassField ::= ClassField Field
| /* ε */ ;

Field ::= VariableDecl
| FunctionDecl ;

InterfaceDecl ::= INTERFACE IDENT LLLAV InterfaceProt RLLAV ;

InterfaceProt ::= InterfaceProt Prototype
| /* ε */ ;

Prototype ::= Type ProtCont
| VOID ProtCont;

ProtCont ::= IDENT LPAR Formals RPAR SEMI ;

StmtBlock ::= LLLAV StmtVar StmtStmt RLLAV ;

StmtVar ::= StmtVar VariableDecl
| /* ε */ ;

StmtStmt ::= Stmt StmtStmt
| /* ε */ ;

Stmt ::= StmtExpr SEMI
| IfStmt
| WhileStmt
| ForStmt
| BreakStmt
| ReturnStmt
| PrintStmt
| StmtBlock ;

StmtExpr ::= Expr
| /* ε */ ;

IfStmt ::= IF LPAR Expr RPAR Stmt ElseIfStmt ;

ElseIfStmt ::= ELSE Stmt
| /* ε */ ;

WhileStmt ::= WHILE LPAR Expr RPAR Stmt ;

ForStmt ::= FOR LPAR StmtExpr SEMI Expr SEMI StmtExpr RPAR Stmt ;

ReturnStmt ::= RETURN StmtExpr SEMI ;

BreakStmt ::= BREAK SEMI ;

PrintStmt ::= PRINT LPAR ExprPrint RPAR SEMI ;

ExprPrint ::= ExprPrint COMMA Expr
| Expr ;

Expr ::= LValue EQUALS Expr
| Constant
| LValue
| THIS
| Call 
| LPAR Expr RPAR 
| Expr PLUS Expr
| Expr MINUS Expr
| Expr TIMES Expr
| Expr DIV Expr
| Expr MOD Expr
| MINUS Expr
| Expr LESS Expr
| Expr LESSEQ Expr
| Expr GREATER Expr
| Expr GREATEREQ Expr
| Expr EQTO Expr
| Expr NOTEQ Expr
| Expr AMPERSONS Expr
| Expr OR Expr
| EXCLAM Expr
| NEW LPAR IDENT RPAR
| NEWARRAY LPAR Expr COMMA Type RPAR
| READINTEGER LPAR RPAR
| READLINE LPAR RPAR
| MALLOC LPAR Expr RPAR ;

LValue ::= IDENT
| Expr PERIOD IDENT
| Expr LCOR Expr RCOR ;

Call ::= IDENT LPAR Actuals RPAR 
| Expr PERIOD IDENT CallCont
| Expr PERIOD LibCall CallCont ;

CallCont ::= LPAR Actuals RPAR ;

LibCall ::= GETBYTE LPAR Expr RPAR 
| SETBYTE LPAR Expr COMMA Expr RPAR ;

Actuals ::= ExprPrint
| /* ε */ ;

Constant ::= intConstant
| doubleConstant
| boolConstant
| stringConstant
| NULL ;