/* The following code was generated by JFlex 1.6.1 */

package minic;
import static minic.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ricardo/Documents/Universidad/Compiladores/Proyecto/minic/src/minic/Lexer.txt</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\1\1\65\1\65\1\1\22\0\1\56\1\36\1\54"+
    "\2\0\1\34\1\40\1\0\1\46\1\47\1\57\1\33\1\34\1\34"+
    "\1\43\1\35\1\62\11\60\1\0\1\42\1\36\1\37\1\36\2\0"+
    "\1\31\3\64\1\61\1\64\7\52\1\30\11\52\1\63\2\52\1\44"+
    "\1\0\1\45\1\0\1\53\1\0\1\20\1\11\1\17\1\5\1\13"+
    "\1\21\1\16\1\22\1\4\1\52\1\27\1\12\1\24\1\6\1\3"+
    "\1\25\1\52\1\15\1\14\1\7\1\10\1\2\1\26\1\23\1\32"+
    "\1\52\1\50\1\41\1\51\7\0\1\65\44\0\1\55\12\0\1\55"+
    "\4\0\1\55\5\0\27\55\1\0\37\55\1\0\u01ca\55\4\0\14\55"+
    "\16\0\5\55\7\0\1\55\1\0\1\55\21\0\165\55\1\0\2\55"+
    "\2\0\4\55\1\0\1\55\6\0\1\55\1\0\3\55\1\0\1\55"+
    "\1\0\24\55\1\0\123\55\1\0\213\55\1\0\255\55\1\0\46\55"+
    "\2\0\1\55\7\0\47\55\11\0\55\55\1\0\1\55\1\0\2\55"+
    "\1\0\2\55\1\0\1\55\10\0\33\55\5\0\3\55\35\0\13\55"+
    "\5\0\112\55\4\0\146\55\1\0\10\55\2\0\12\55\1\0\23\55"+
    "\2\0\1\55\20\0\73\55\2\0\145\55\16\0\66\55\4\0\1\55"+
    "\5\0\56\55\22\0\34\55\104\0\23\55\61\0\200\55\2\0\12\55"+
    "\1\0\23\55\1\0\10\55\2\0\2\55\2\0\26\55\1\0\7\55"+
    "\1\0\1\55\3\0\4\55\2\0\11\55\2\0\2\55\2\0\4\55"+
    "\10\0\1\55\4\0\2\55\1\0\5\55\2\0\14\55\17\0\3\55"+
    "\1\0\6\55\4\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55"+
    "\1\0\2\55\1\0\2\55\2\0\1\55\1\0\5\55\4\0\2\55"+
    "\2\0\3\55\3\0\1\55\7\0\4\55\1\0\1\55\7\0\20\55"+
    "\13\0\3\55\1\0\11\55\1\0\3\55\1\0\26\55\1\0\7\55"+
    "\1\0\2\55\1\0\5\55\2\0\12\55\1\0\3\55\1\0\3\55"+
    "\2\0\1\55\17\0\4\55\2\0\12\55\21\0\3\55\1\0\10\55"+
    "\2\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55\1\0\5\55"+
    "\2\0\11\55\2\0\2\55\2\0\3\55\10\0\2\55\4\0\2\55"+
    "\1\0\5\55\2\0\12\55\1\0\1\55\20\0\2\55\1\0\6\55"+
    "\3\0\3\55\1\0\4\55\3\0\2\55\1\0\1\55\1\0\2\55"+
    "\3\0\2\55\3\0\3\55\3\0\14\55\4\0\5\55\3\0\3\55"+
    "\1\0\4\55\2\0\1\55\6\0\1\55\16\0\12\55\20\0\4\55"+
    "\1\0\10\55\1\0\3\55\1\0\27\55\1\0\20\55\3\0\10\55"+
    "\1\0\3\55\1\0\4\55\7\0\2\55\1\0\2\55\6\0\4\55"+
    "\2\0\12\55\21\0\3\55\1\0\10\55\1\0\3\55\1\0\27\55"+
    "\1\0\12\55\1\0\5\55\2\0\11\55\1\0\3\55\1\0\4\55"+
    "\7\0\2\55\7\0\1\55\1\0\4\55\2\0\12\55\1\0\2\55"+
    "\16\0\3\55\1\0\10\55\1\0\3\55\1\0\51\55\2\0\10\55"+
    "\1\0\3\55\1\0\5\55\10\0\1\55\10\0\4\55\2\0\12\55"+
    "\12\0\6\55\2\0\2\55\1\0\22\55\3\0\30\55\1\0\11\55"+
    "\1\0\1\55\2\0\7\55\3\0\1\55\4\0\6\55\1\0\1\55"+
    "\1\0\10\55\6\0\12\55\2\0\2\55\15\0\72\55\5\0\17\55"+
    "\1\0\12\55\47\0\2\55\1\0\1\55\2\0\2\55\1\0\1\55"+
    "\2\0\1\55\6\0\4\55\1\0\7\55\1\0\3\55\1\0\1\55"+
    "\1\0\1\55\2\0\2\55\1\0\15\55\1\0\3\55\2\0\5\55"+
    "\1\0\1\55\1\0\6\55\2\0\12\55\2\0\4\55\40\0\1\55"+
    "\27\0\2\55\6\0\12\55\13\0\1\55\1\0\1\55\1\0\1\55"+
    "\4\0\12\55\1\0\44\55\4\0\24\55\1\0\22\55\1\0\44\55"+
    "\11\0\1\55\71\0\112\55\6\0\116\55\2\0\46\55\1\0\1\55"+
    "\5\0\1\55\2\0\53\55\1\0\u014d\55\1\0\4\55\2\0\7\55"+
    "\1\0\1\55\1\0\4\55\2\0\51\55\1\0\4\55\2\0\41\55"+
    "\1\0\4\55\2\0\7\55\1\0\1\55\1\0\4\55\2\0\17\55"+
    "\1\0\71\55\1\0\4\55\2\0\103\55\2\0\3\55\40\0\20\55"+
    "\20\0\125\55\14\0\u026c\55\2\0\21\55\1\0\32\55\5\0\113\55"+
    "\3\0\13\55\7\0\15\55\1\0\7\55\13\0\25\55\13\0\24\55"+
    "\14\0\15\55\1\0\3\55\1\0\2\55\14\0\124\55\3\0\1\55"+
    "\4\0\2\55\2\0\12\55\41\0\3\55\2\0\12\55\6\0\130\55"+
    "\10\0\53\55\5\0\106\55\12\0\37\55\1\0\14\55\4\0\14\55"+
    "\12\0\50\55\2\0\5\55\13\0\54\55\4\0\32\55\6\0\12\55"+
    "\46\0\34\55\4\0\77\55\1\0\35\55\2\0\13\55\6\0\12\55"+
    "\15\0\1\55\10\0\17\55\101\0\114\55\4\0\12\55\21\0\11\55"+
    "\14\0\164\55\14\0\70\55\10\0\12\55\3\0\61\55\122\0\3\55"+
    "\1\0\43\55\1\0\2\55\6\0\366\55\6\0\u011a\55\2\0\6\55"+
    "\2\0\46\55\2\0\6\55\2\0\10\55\1\0\1\55\1\0\1\55"+
    "\1\0\1\55\1\0\37\55\2\0\65\55\1\0\7\55\1\0\1\55"+
    "\3\0\3\55\1\0\7\55\3\0\4\55\2\0\6\55\4\0\15\55"+
    "\5\0\3\55\1\0\7\55\53\0\1\65\1\65\25\0\2\55\23\0"+
    "\1\55\34\0\1\55\15\0\1\55\20\0\15\55\63\0\41\55\21\0"+
    "\1\55\4\0\1\55\2\0\12\55\1\0\1\55\3\0\5\55\6\0"+
    "\1\55\1\0\1\55\1\0\1\55\1\0\4\55\1\0\13\55\2\0"+
    "\4\55\5\0\5\55\4\0\1\55\21\0\51\55\u032d\0\64\55\u0716\0"+
    "\57\55\1\0\57\55\1\0\205\55\6\0\11\55\14\0\46\55\1\0"+
    "\1\55\5\0\1\55\2\0\70\55\7\0\1\55\17\0\30\55\11\0"+
    "\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0"+
    "\7\55\1\0\7\55\1\0\7\55\1\0\40\55\57\0\1\55\u01d5\0"+
    "\3\55\31\0\17\55\1\0\5\55\2\0\5\55\4\0\126\55\2\0"+
    "\2\55\2\0\3\55\1\0\132\55\1\0\4\55\5\0\51\55\3\0"+
    "\136\55\21\0\33\55\65\0\20\55\u0200\0\u19b6\55\112\0\u51cd\55\63\0"+
    "\u048d\55\103\0\56\55\2\0\u010d\55\3\0\34\55\24\0\63\55\1\0"+
    "\12\55\1\0\37\55\1\0\123\55\45\0\11\55\2\0\147\55\2\0"+
    "\4\55\1\0\36\55\2\0\2\55\105\0\61\55\30\0\64\55\14\0"+
    "\105\55\13\0\12\55\6\0\30\55\3\0\1\55\4\0\56\55\2\0"+
    "\44\55\14\0\35\55\3\0\101\55\16\0\13\55\6\0\37\55\1\0"+
    "\67\55\11\0\16\55\2\0\12\55\6\0\27\55\3\0\111\55\30\0"+
    "\3\55\2\0\20\55\2\0\5\55\12\0\6\55\2\0\6\55\2\0"+
    "\6\55\11\0\7\55\1\0\7\55\1\0\53\55\1\0\4\55\4\0"+
    "\2\55\132\0\53\55\1\0\2\55\2\0\12\55\6\0\u2ba4\55\14\0"+
    "\27\55\4\0\61\55\u2104\0\u016e\55\2\0\152\55\46\0\7\55\14\0"+
    "\5\55\5\0\14\55\1\0\15\55\1\0\5\55\1\0\1\55\1\0"+
    "\2\55\1\0\2\55\1\0\154\55\41\0\u016b\55\22\0\100\55\2\0"+
    "\66\55\50\0\14\55\4\0\20\55\20\0\16\55\5\0\2\55\30\0"+
    "\3\55\40\0\5\55\1\0\207\55\23\0\12\55\7\0\32\55\4\0"+
    "\1\55\1\0\32\55\13\0\131\55\3\0\6\55\2\0\6\55\2\0"+
    "\6\55\2\0\3\55\43\0\14\55\1\0\32\55\1\0\23\55\1\0"+
    "\2\55\1\0\17\55\2\0\16\55\42\0\173\55\105\0\65\55\210\0"+
    "\1\55\202\0\35\55\3\0\61\55\17\0\1\55\37\0\40\55\20\0"+
    "\33\55\5\0\53\55\5\0\36\55\2\0\44\55\4\0\10\55\1\0"+
    "\5\55\52\0\236\55\2\0\12\55\126\0\50\55\10\0\64\55\234\0"+
    "\u0137\55\11\0\26\55\12\0\10\55\230\0\6\55\2\0\1\55\1\0"+
    "\54\55\1\0\2\55\3\0\1\55\2\0\27\55\12\0\27\55\11\0"+
    "\37\55\141\0\26\55\12\0\32\55\106\0\70\55\6\0\2\55\100\0"+
    "\4\55\1\0\2\55\5\0\10\55\1\0\3\55\1\0\33\55\4\0"+
    "\3\55\4\0\1\55\40\0\35\55\3\0\35\55\43\0\10\55\1\0"+
    "\36\55\31\0\66\55\12\0\26\55\12\0\23\55\15\0\22\55\156\0"+
    "\111\55\u03b7\0\107\55\37\0\12\55\17\0\74\55\25\0\31\55\7\0"+
    "\12\55\6\0\65\55\1\0\12\55\20\0\44\55\2\0\1\55\11\0"+
    "\105\55\13\0\13\55\45\0\22\55\1\0\45\55\170\0\73\55\5\0"+
    "\12\55\7\0\3\55\1\0\10\55\2\0\2\55\2\0\26\55\1\0"+
    "\7\55\1\0\2\55\1\0\5\55\2\0\11\55\2\0\2\55\2\0"+
    "\3\55\11\0\1\55\5\0\7\55\2\0\7\55\3\0\5\55\u010b\0"+
    "\106\55\1\0\1\55\10\0\12\55\246\0\66\55\2\0\11\55\77\0"+
    "\101\55\3\0\1\55\13\0\12\55\46\0\70\55\10\0\12\55\u01d6\0"+
    "\112\55\25\0\1\55\u01c0\0\71\55\u0507\0\u0399\55\147\0\157\55\u0b91\0"+
    "\u042f\55\u33d1\0\u0239\55\7\0\37\55\1\0\12\55\146\0\36\55\2\0"+
    "\5\55\13\0\67\55\11\0\4\55\14\0\12\55\11\0\25\55\5\0"+
    "\23\55\u0370\0\105\55\13\0\57\55\20\0\21\55\u4060\0\2\55\u0bfe\0"+
    "\153\55\5\0\15\55\3\0\11\55\7\0\12\55\3\0\2\55\u14c6\0"+
    "\5\55\3\0\6\55\10\0\10\55\2\0\7\55\36\0\4\55\224\0"+
    "\3\55\u01bb\0\125\55\1\0\107\55\1\0\2\55\2\0\1\55\2\0"+
    "\2\55\2\0\4\55\1\0\14\55\1\0\1\55\1\0\7\55\1\0"+
    "\101\55\1\0\4\55\2\0\10\55\1\0\7\55\1\0\34\55\1\0"+
    "\4\55\1\0\5\55\1\0\1\55\3\0\7\55\1\0\u0154\55\2\0"+
    "\31\55\1\0\31\55\1\0\37\55\1\0\31\55\1\0\37\55\1\0"+
    "\31\55\1\0\37\55\1\0\31\55\1\0\37\55\1\0\31\55\1\0"+
    "\10\55\2\0\62\55\u1000\0\305\55\13\0\7\55\u0529\0\4\55\1\0"+
    "\33\55\1\0\2\55\1\0\1\55\2\0\1\55\1\0\12\55\1\0"+
    "\4\55\1\0\1\55\1\0\1\55\6\0\1\55\4\0\1\55\1\0"+
    "\1\55\1\0\1\55\1\0\3\55\1\0\2\55\1\0\1\55\2\0"+
    "\1\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0"+
    "\2\55\1\0\1\55\2\0\4\55\1\0\7\55\1\0\4\55\1\0"+
    "\4\55\1\0\1\55\1\0\12\55\1\0\21\55\5\0\3\55\1\0"+
    "\5\55\1\0\21\55\u0274\0\32\55\6\0\32\55\6\0\32\55\u0e76\0"+
    "\ua6d7\55\51\0\u1035\55\13\0\336\55\u3fe2\0\u021e\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\55\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\16\3\3\4\2\1\3\4\1\1"+
    "\2\5\2\3\1\6\17\3\3\0\1\7\1\0\1\3"+
    "\1\6\14\3\1\6\1\2\1\0\1\10\1\0\1\11"+
    "\10\3\2\0\7\3\1\7\2\3\1\12\5\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\66\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\242\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8"+
    "\0\u0cde\0\u0d14\0\u0912\0\u0d4a\0\66\0\u0d80\0\u09ea\0\u0db6"+
    "\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66"+
    "\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116"+
    "\0\u0f9c\0\u114c\0\u1182\0\66\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\5\1\12\1\5\1\13\1\14\1\15\1\5\1\16"+
    "\1\5\1\17\4\5\1\20\1\5\1\21\2\5\2\22"+
    "\1\23\2\24\1\25\1\26\2\22\1\27\1\22\1\30"+
    "\1\22\1\31\1\22\1\5\1\2\1\32\1\2\1\3"+
    "\1\2\1\33\1\5\1\34\2\5\71\0\1\5\1\35"+
    "\27\5\17\0\2\5\4\0\5\5\3\0\31\5\17\0"+
    "\2\5\4\0\5\5\3\0\4\5\1\36\12\5\1\37"+
    "\2\5\1\40\6\5\17\0\2\5\4\0\5\5\3\0"+
    "\1\5\1\41\27\5\17\0\2\5\4\0\5\5\3\0"+
    "\6\5\1\42\22\5\17\0\2\5\4\0\5\5\3\0"+
    "\20\5\1\43\10\5\17\0\2\5\4\0\5\5\3\0"+
    "\1\5\1\44\11\5\1\45\15\5\17\0\2\5\4\0"+
    "\5\5\3\0\10\5\1\46\10\5\1\47\7\5\17\0"+
    "\2\5\4\0\5\5\3\0\5\5\1\50\23\5\17\0"+
    "\2\5\4\0\5\5\3\0\11\5\1\51\17\5\17\0"+
    "\2\5\4\0\5\5\3\0\10\5\1\52\20\5\17\0"+
    "\2\5\4\0\5\5\3\0\1\5\1\53\14\5\1\54"+
    "\12\5\17\0\2\5\4\0\5\5\3\0\20\5\1\55"+
    "\10\5\17\0\2\5\4\0\5\5\3\0\11\5\1\56"+
    "\17\5\17\0\2\5\4\0\5\5\36\0\1\57\21\0"+
    "\1\60\45\0\1\22\66\0\1\22\66\0\1\22\71\0"+
    "\1\22\67\0\1\22\67\0\1\22\14\0\54\61\1\0"+
    "\11\61\43\0\1\62\14\0\1\33\1\0\1\33\26\0"+
    "\1\63\17\0\1\62\14\0\1\33\1\0\1\33\1\63"+
    "\4\0\2\5\1\64\26\5\17\0\2\5\4\0\5\5"+
    "\3\0\5\5\1\65\23\5\17\0\2\5\4\0\5\5"+
    "\3\0\23\5\1\66\5\5\17\0\2\5\4\0\5\5"+
    "\3\0\6\5\1\67\22\5\17\0\2\5\4\0\5\5"+
    "\3\0\10\5\1\70\20\5\17\0\2\5\4\0\5\5"+
    "\3\0\2\5\1\71\26\5\17\0\2\5\4\0\5\5"+
    "\3\0\1\5\1\70\27\5\17\0\2\5\4\0\5\5"+
    "\3\0\11\5\1\72\17\5\17\0\2\5\4\0\5\5"+
    "\3\0\12\5\1\73\16\5\17\0\2\5\4\0\5\5"+
    "\3\0\5\5\1\74\23\5\17\0\2\5\4\0\5\5"+
    "\3\0\13\5\1\75\15\5\17\0\2\5\4\0\5\5"+
    "\3\0\5\5\1\76\23\5\17\0\2\5\4\0\5\5"+
    "\3\0\16\5\1\77\12\5\17\0\2\5\4\0\5\5"+
    "\3\0\13\5\1\37\15\5\17\0\2\5\4\0\5\5"+
    "\3\0\10\5\1\100\20\5\17\0\2\5\4\0\5\5"+
    "\3\0\2\5\1\101\26\5\17\0\2\5\4\0\5\5"+
    "\3\0\24\5\1\102\4\5\17\0\2\5\4\0\5\5"+
    "\1\0\1\103\1\0\64\103\57\104\1\0\6\104\2\0"+
    "\31\61\17\0\2\61\1\105\2\61\1\0\5\61\14\0"+
    "\1\106\44\0\1\62\1\106\1\62\10\0\1\107\3\0"+
    "\1\107\1\0\1\107\3\0\3\107\7\0\1\107\7\0"+
    "\1\107\16\0\3\107\1\0\1\107\3\0\3\5\1\37"+
    "\25\5\17\0\2\5\4\0\5\5\3\0\11\5\1\110"+
    "\17\5\17\0\2\5\4\0\5\5\3\0\10\5\1\111"+
    "\20\5\17\0\2\5\4\0\5\5\3\0\7\5\1\101"+
    "\21\5\17\0\2\5\4\0\5\5\3\0\10\5\1\37"+
    "\20\5\17\0\2\5\4\0\5\5\3\0\12\5\1\37"+
    "\16\5\17\0\2\5\4\0\5\5\3\0\16\5\1\112"+
    "\12\5\17\0\2\5\4\0\5\5\3\0\11\5\1\37"+
    "\17\5\17\0\2\5\4\0\5\5\3\0\11\5\1\113"+
    "\17\5\17\0\2\5\4\0\5\5\3\0\2\5\1\114"+
    "\26\5\17\0\2\5\4\0\5\5\3\0\6\5\1\115"+
    "\22\5\17\0\2\5\4\0\5\5\3\0\12\5\1\71"+
    "\16\5\17\0\2\5\4\0\5\5\3\0\12\5\1\116"+
    "\16\5\17\0\2\5\4\0\5\5\3\0\10\5\1\73"+
    "\20\5\17\0\2\5\4\0\5\5\3\0\27\5\1\117"+
    "\1\5\17\0\2\5\4\0\5\5\1\0\57\104\1\120"+
    "\6\104\33\0\1\121\34\0\13\5\1\122\15\5\17\0"+
    "\2\5\4\0\5\5\3\0\11\5\1\123\17\5\17\0"+
    "\2\5\4\0\5\5\3\0\25\5\1\37\3\5\17\0"+
    "\2\5\4\0\5\5\3\0\4\5\1\124\24\5\17\0"+
    "\2\5\4\0\5\5\3\0\4\5\1\125\24\5\17\0"+
    "\2\5\4\0\5\5\3\0\13\5\1\126\15\5\17\0"+
    "\2\5\4\0\5\5\3\0\11\5\1\127\17\5\17\0"+
    "\2\5\4\0\5\5\3\0\13\5\1\130\15\5\17\0"+
    "\2\5\4\0\5\5\1\0\35\104\1\3\21\104\1\120"+
    "\6\104\60\0\1\131\1\0\1\131\5\0\17\5\1\132"+
    "\11\5\17\0\2\5\4\0\5\5\3\0\22\5\1\133"+
    "\6\5\17\0\2\5\4\0\5\5\3\0\3\5\1\71"+
    "\25\5\17\0\2\5\4\0\5\5\3\0\14\5\1\37"+
    "\14\5\17\0\2\5\4\0\5\5\3\0\4\5\1\37"+
    "\24\5\17\0\2\5\4\0\5\5\3\0\31\5\7\0"+
    "\1\134\7\0\2\5\4\0\5\5\3\0\13\5\1\135"+
    "\15\5\17\0\2\5\4\0\5\5\3\0\16\5\1\136"+
    "\12\5\17\0\2\5\4\0\5\5\3\0\11\5\1\137"+
    "\17\5\17\0\2\5\4\0\5\5\3\0\16\5\1\140"+
    "\12\5\17\0\2\5\4\0\5\5\3\0\15\5\1\73"+
    "\13\5\17\0\2\5\4\0\5\5\3\0\4\5\1\141"+
    "\24\5\17\0\2\5\4\0\5\5\3\0\30\5\1\37"+
    "\17\0\2\5\4\0\5\5\3\0\5\5\1\71\23\5"+
    "\17\0\2\5\4\0\5\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4806];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\16\1\1\11\34\1\3\0\1\1\1\0"+
    "\20\1\1\0\1\11\1\0\11\1\2\0\12\1\1\11"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[97];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        public String analizar;
        public int linea,columna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2686) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return ERROR;
            }
          case 11: break;
          case 2: 
            { /*Ignore*/
            }
          case 12: break;
          case 3: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return Identificador;
            }
          case 13: break;
          case 4: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return Caracter;
            }
          case 14: break;
          case 5: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return Numero_Entero;
            }
          case 15: break;
          case 6: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return Palabra_Reservada;
            }
          case 16: break;
          case 7: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return Double;
            }
          case 17: break;
          case 8: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return String;
            }
          case 18: break;
          case 9: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return Numero_Hexadecimal;
            }
          case 19: break;
          case 10: 
            { analizar=yytext(); linea=yyline; columna=yycolumn; return Constante_Booleana;
            }
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
