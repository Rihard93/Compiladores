/* The following code was generated by JFlex 1.6.1 */

package minic;
//import static minic.Token.*;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Ricardo/Documents/Universidad/Compiladores/Proyecto/minic/src/minic/Lexer.txt</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\72\1\100\1\100\1\72\22\0\1\1\1\56\1\71"+
    "\2\0\1\52\1\57\1\0\1\65\1\66\1\47\1\50\1\61\1\51"+
    "\1\62\1\46\1\75\11\73\1\0\1\12\1\53\1\54\1\55\2\0"+
    "\1\32\1\42\2\77\1\74\1\77\1\41\1\44\1\36\2\44\1\37"+
    "\1\40\1\31\1\44\1\34\1\44\1\35\1\43\4\44\1\76\2\44"+
    "\1\63\1\0\1\64\1\0\1\45\1\0\1\7\1\20\1\22\1\16"+
    "\1\5\1\6\1\21\1\23\1\15\1\44\1\30\1\10\1\25\1\17"+
    "\1\14\1\26\1\44\1\3\1\11\1\2\1\4\1\13\1\27\1\24"+
    "\1\33\1\44\1\67\1\60\1\70\7\0\1\100\u1fa2\0\1\100\1\100"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\6\3\1\4\15\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\2\26\10\3\1\27\16\3\2\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\0\1\40"+
    "\1\0\5\3\1\41\2\3\1\42\7\3\1\43\5\3"+
    "\1\2\1\44\1\45\1\0\1\46\1\47\1\3\1\50"+
    "\3\3\1\51\3\3\1\52\1\3\1\53\10\3\2\0"+
    "\1\40\7\3\1\54\1\55\1\56\1\3\1\57\5\3"+
    "\1\0\1\60\1\3\1\61\1\62\2\3\1\63\3\3"+
    "\1\64\2\3\1\65\5\3\1\66\1\67\2\3\1\70"+
    "\1\3\1\71\1\72\2\3\1\73\1\3\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\101\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\101\0\101\0\101\0\101\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\101\0\101\0\u071c\0\101\0\101\0\101"+
    "\0\u075d\0\101\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0104\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\101\0\101"+
    "\0\101\0\101\0\101\0\101\0\101\0\101\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u0104\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u0df7"+
    "\0\u1491\0\u0e79\0\u14d2\0\u0efb\0\u0104\0\u1513\0\u0104\0\u1554"+
    "\0\u1595\0\u15d6\0\u0104\0\u1617\0\u1658\0\u1699\0\u0104\0\u16da"+
    "\0\u0104\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68"+
    "\0\u1aa9\0\u1aea\0\u1b2b\0\u0104\0\u0104\0\u0104\0\u1b6c\0\u0104"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u0104\0\u1d33"+
    "\0\101\0\u0104\0\u1d74\0\u1db5\0\u0104\0\u1df6\0\u1e37\0\u1e78"+
    "\0\u0104\0\u1eb9\0\u1efa\0\u0104\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u0104\0\u0104\0\u2080\0\u20c1\0\u0104\0\u2102\0\u0104"+
    "\0\u0104\0\u2143\0\u2184\0\u0104\0\u21c5\0\u0104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\6"+
    "\1\11\1\12\1\13\1\6\1\14\1\15\1\16\1\17"+
    "\1\6\1\20\4\6\1\21\1\6\1\22\2\6\1\23"+
    "\1\24\2\6\1\25\1\26\1\6\1\27\1\6\1\2"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\3\1\54\1\6\1\55"+
    "\2\6\104\0\10\6\1\0\10\6\1\56\22\6\25\0"+
    "\5\6\3\0\3\6\1\57\4\6\1\0\33\6\25\0"+
    "\5\6\3\0\10\6\1\0\33\6\25\0\5\6\3\0"+
    "\6\6\1\60\1\6\1\0\11\6\1\61\21\6\25\0"+
    "\5\6\3\0\5\6\1\62\2\6\1\0\1\6\1\63"+
    "\31\6\25\0\5\6\3\0\1\64\7\6\1\0\33\6"+
    "\25\0\5\6\3\0\10\6\1\0\1\6\1\65\31\6"+
    "\25\0\5\6\3\0\4\6\1\66\3\6\1\0\4\6"+
    "\1\67\5\6\1\70\20\6\25\0\5\6\3\0\10\6"+
    "\1\0\1\6\1\71\31\6\25\0\5\6\3\0\2\6"+
    "\1\72\5\6\1\0\33\6\25\0\5\6\3\0\1\6"+
    "\1\73\6\6\1\0\1\6\1\74\31\6\25\0\5\6"+
    "\3\0\6\6\1\75\1\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\10\6\1\76\22\6\25\0\5\6"+
    "\3\0\3\6\1\77\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\1\6\1\100\6\6\1\0\33\6\25\0\5\6"+
    "\3\0\3\6\1\101\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\5\6\1\102\2\6\1\0\33\6\25\0\5\6"+
    "\3\0\3\6\1\103\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\3\6\1\104\4\6\1\0\33\6\25\0\5\6"+
    "\47\0\1\105\1\106\105\0\1\107\100\0\1\110\100\0"+
    "\1\111\100\0\1\112\103\0\1\113\101\0\1\114\104\0"+
    "\1\115\104\0\1\116\10\0\72\117\1\0\6\117\62\0"+
    "\1\120\10\0\1\54\1\0\1\54\27\0\1\121\35\0"+
    "\1\120\10\0\1\54\1\0\1\54\1\121\4\0\10\6"+
    "\1\0\2\6\1\122\30\6\25\0\5\6\3\0\1\123"+
    "\7\6\1\0\33\6\25\0\5\6\3\0\7\6\1\124"+
    "\1\0\33\6\25\0\5\6\3\0\1\125\7\6\1\0"+
    "\33\6\25\0\5\6\3\0\6\6\1\126\1\6\1\0"+
    "\33\6\25\0\5\6\3\0\1\6\1\127\6\6\1\0"+
    "\33\6\25\0\5\6\3\0\1\6\1\130\6\6\1\0"+
    "\33\6\25\0\5\6\3\0\10\6\1\0\2\6\1\131"+
    "\30\6\25\0\5\6\3\0\1\132\7\6\1\0\33\6"+
    "\25\0\5\6\3\0\10\6\1\0\13\6\1\133\17\6"+
    "\25\0\5\6\3\0\2\6\1\134\5\6\1\0\33\6"+
    "\25\0\5\6\3\0\6\6\1\135\1\6\1\0\33\6"+
    "\25\0\5\6\3\0\3\6\1\136\4\6\1\0\33\6"+
    "\25\0\5\6\3\0\10\6\1\0\1\6\1\137\31\6"+
    "\25\0\5\6\3\0\5\6\1\140\2\6\1\0\33\6"+
    "\25\0\5\6\3\0\10\6\1\0\2\6\1\141\30\6"+
    "\25\0\5\6\3\0\10\6\1\0\14\6\1\142\16\6"+
    "\25\0\5\6\3\0\10\6\1\0\2\6\1\143\30\6"+
    "\25\0\5\6\3\0\5\6\1\144\2\6\1\0\33\6"+
    "\25\0\5\6\3\0\6\6\1\145\1\6\1\0\33\6"+
    "\25\0\5\6\3\0\1\146\7\6\1\0\33\6\25\0"+
    "\5\6\3\0\1\147\7\6\1\0\33\6\25\0\5\6"+
    "\1\0\72\150\1\0\6\150\47\151\1\0\31\151\71\117"+
    "\1\152\1\0\6\117\5\0\1\153\65\0\1\120\1\153"+
    "\1\120\10\0\3\154\6\0\1\154\1\0\1\154\1\0"+
    "\1\154\7\0\1\154\7\0\1\154\15\0\1\154\12\0"+
    "\3\154\1\0\1\154\3\0\7\6\1\155\1\0\33\6"+
    "\25\0\5\6\3\0\2\6\1\156\5\6\1\0\33\6"+
    "\25\0\5\6\3\0\3\6\1\157\4\6\1\0\33\6"+
    "\25\0\5\6\3\0\3\6\1\160\4\6\1\0\33\6"+
    "\25\0\5\6\3\0\7\6\1\161\1\0\33\6\25\0"+
    "\5\6\3\0\10\6\1\0\2\6\1\162\30\6\25\0"+
    "\5\6\3\0\10\6\1\0\3\6\1\163\27\6\25\0"+
    "\5\6\3\0\3\6\1\164\4\6\1\0\33\6\25\0"+
    "\5\6\3\0\6\6\1\165\1\6\1\0\33\6\25\0"+
    "\5\6\3\0\10\6\1\0\5\6\1\166\25\6\25\0"+
    "\5\6\3\0\6\6\1\167\1\6\1\0\33\6\25\0"+
    "\5\6\3\0\5\6\1\170\2\6\1\0\33\6\25\0"+
    "\5\6\3\0\6\6\1\171\1\6\1\0\33\6\25\0"+
    "\5\6\3\0\7\6\1\172\1\0\33\6\25\0\5\6"+
    "\3\0\6\6\1\173\1\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\17\6\1\174\13\6\25\0\5\6"+
    "\3\0\10\6\1\0\4\6\1\175\26\6\25\0\5\6"+
    "\3\0\10\6\1\0\3\6\1\176\27\6\25\0\5\6"+
    "\3\0\6\6\1\177\1\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\27\6\1\200\3\6\25\0\5\6"+
    "\3\0\10\6\1\0\27\6\1\201\3\6\25\0\5\6"+
    "\1\0\47\151\1\202\31\151\50\0\1\203\22\0\1\204"+
    "\1\0\1\204\5\0\1\6\1\205\6\6\1\0\33\6"+
    "\25\0\5\6\3\0\10\6\1\0\4\6\1\206\26\6"+
    "\25\0\5\6\3\0\3\6\1\207\4\6\1\0\33\6"+
    "\25\0\5\6\3\0\10\6\1\0\4\6\1\210\26\6"+
    "\25\0\5\6\3\0\1\6\1\211\6\6\1\0\33\6"+
    "\25\0\5\6\3\0\3\6\1\212\4\6\1\0\33\6"+
    "\25\0\5\6\3\0\6\6\1\213\1\6\1\0\33\6"+
    "\25\0\5\6\3\0\10\6\1\0\15\6\1\214\15\6"+
    "\25\0\5\6\3\0\7\6\1\215\1\0\33\6\25\0"+
    "\5\6\3\0\3\6\1\216\4\6\1\0\33\6\25\0"+
    "\5\6\3\0\1\6\1\217\6\6\1\0\33\6\25\0"+
    "\5\6\3\0\1\220\7\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\23\6\1\221\1\222\6\6\25\0"+
    "\5\6\3\0\10\6\1\0\1\6\1\223\31\6\25\0"+
    "\5\6\3\0\10\6\1\0\20\6\1\224\12\6\25\0"+
    "\5\6\3\0\10\6\1\0\20\6\1\225\12\6\25\0"+
    "\5\6\1\0\46\226\1\3\1\202\31\226\73\0\1\204"+
    "\1\0\1\204\5\0\10\6\1\0\4\6\1\227\26\6"+
    "\25\0\5\6\3\0\10\6\1\0\3\6\1\230\27\6"+
    "\25\0\5\6\3\0\10\6\1\231\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\6\6\1\232\24\6\25\0\5\6"+
    "\3\0\4\6\1\233\3\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\12\6\1\234\20\6\25\0\5\6"+
    "\3\0\3\6\1\235\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\1\6\1\236\6\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\4\6\1\237\26\6\25\0\5\6"+
    "\3\0\10\6\1\0\2\6\1\240\30\6\25\0\5\6"+
    "\3\0\10\6\1\0\7\6\1\241\23\6\25\0\5\6"+
    "\3\0\1\242\7\6\1\0\33\6\25\0\5\6\3\0"+
    "\1\243\7\6\1\0\33\6\25\0\5\6\1\0\47\226"+
    "\1\202\31\226\2\0\7\6\1\244\1\0\33\6\25\0"+
    "\5\6\3\0\5\6\1\245\2\6\1\0\33\6\25\0"+
    "\5\6\3\0\3\6\1\246\4\6\1\0\33\6\25\0"+
    "\5\6\3\0\5\6\1\247\2\6\1\0\33\6\25\0"+
    "\5\6\3\0\1\250\7\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\4\6\1\251\26\6\25\0\5\6"+
    "\3\0\3\6\1\252\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\3\6\1\253\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\10\6\1\0\7\6\1\254\23\6\25\0\5\6"+
    "\3\0\10\6\1\0\4\6\1\255\26\6\25\0\5\6"+
    "\3\0\10\6\1\0\20\6\1\256\12\6\25\0\5\6"+
    "\3\0\3\6\1\257\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\3\6\1\260\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\3\6\1\261\4\6\1\0\33\6\25\0\5\6"+
    "\3\0\1\262\7\6\1\0\33\6\25\0\5\6\3\0"+
    "\10\6\1\0\6\6\1\263\24\6\25\0\5\6\3\0"+
    "\7\6\1\264\1\0\33\6\25\0\5\6\3\0\3\6"+
    "\1\265\4\6\1\0\33\6\25\0\5\6\3\0\1\6"+
    "\1\266\6\6\1\0\33\6\25\0\5\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8710];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\16\1\4\11\6\1\2\11"+
    "\1\1\3\11\1\1\1\11\32\1\2\0\10\11\1\0"+
    "\1\1\1\0\31\1\1\0\26\1\2\0\22\1\1\0"+
    "\2\1\1\11\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        //public String analizar;
        //public int linea,columna;
        
        private Symbol symbol(int type)
        {
            return new Symbol(type, yyline, yycolumn);
        }

        private Symbol symbol(int type, Object value)
        {
            return new Symbol(type, yyline, yycolumn, value);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 214) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(" *** ERROR LINEA " + (yyline +1) + " ***" + "   " + "Caracter no reconocido " + yytext() + "\n");
            }
          case 61: break;
          case 2: 
            { /*Ignore*/
            }
          case 62: break;
          case 3: 
            { return symbol(sym.IDENT, yytext());
            }
          case 63: break;
          case 4: 
            { return symbol(sym.SEMI, yytext());
            }
          case 64: break;
          case 5: 
            { return symbol(sym.DIV, yytext());
            }
          case 65: break;
          case 6: 
            { return symbol(sym.TIMES, yytext());
            }
          case 66: break;
          case 7: 
            { return symbol(sym.PLUS, yytext());
            }
          case 67: break;
          case 8: 
            { return symbol(sym.MINUS, yytext());
            }
          case 68: break;
          case 9: 
            { return symbol(sym.MOD, yytext());
            }
          case 69: break;
          case 10: 
            { return symbol(sym.LESS, yytext());
            }
          case 70: break;
          case 11: 
            { return symbol(sym.EQUALS, yytext());
            }
          case 71: break;
          case 12: 
            { return symbol(sym.GREATER, yytext());
            }
          case 72: break;
          case 13: 
            { return symbol(sym.EXCLAM, yytext());
            }
          case 73: break;
          case 14: 
            { return symbol(sym.COMMA, yytext());
            }
          case 74: break;
          case 15: 
            { return symbol(sym.PERIOD, yytext());
            }
          case 75: break;
          case 16: 
            { return symbol(sym.LCOR, yytext());
            }
          case 76: break;
          case 17: 
            { return symbol(sym.RCOR, yytext());
            }
          case 77: break;
          case 18: 
            { return symbol(sym.LPAR, yytext());
            }
          case 78: break;
          case 19: 
            { return symbol(sym.RPAR, yytext());
            }
          case 79: break;
          case 20: 
            { return symbol(sym.LLLAV, yytext());
            }
          case 80: break;
          case 21: 
            { return symbol(sym.RLLAV, yytext());
            }
          case 81: break;
          case 22: 
            { return symbol(sym.intConstant, new Integer(yytext()));
            }
          case 82: break;
          case 23: 
            { return symbol(sym.IF, yytext());
            }
          case 83: break;
          case 24: 
            { return symbol(sym.LESSEQ, yytext());
            }
          case 84: break;
          case 25: 
            { return symbol(sym.EQTO, yytext());
            }
          case 85: break;
          case 26: 
            { return symbol(sym.GREATEREQ, yytext());
            }
          case 86: break;
          case 27: 
            { return symbol(sym.NOTEQ, yytext());
            }
          case 87: break;
          case 28: 
            { return symbol(sym.AMPERSONS, yytext());
            }
          case 88: break;
          case 29: 
            { return symbol(sym.OR, yytext());
            }
          case 89: break;
          case 30: 
            { return symbol(sym.CORS, yytext());
            }
          case 90: break;
          case 31: 
            { return symbol(sym.LLAVS, yytext());
            }
          case 91: break;
          case 32: 
            { return symbol(sym.doubleConstant, yytext());
            }
          case 92: break;
          case 33: 
            { return symbol(sym.FOR, yytext());
            }
          case 93: break;
          case 34: 
            { return symbol(sym.INT, yytext());
            }
          case 94: break;
          case 35: 
            { return symbol(sym.NEW, yytext());
            }
          case 95: break;
          case 36: 
            { System.out.print(" *** ERROR LINEA " + (yyline +1) + " ***" + "   " + "Comentario Incompleto - Falta cierre de comentario multilinea " + "\n");
            }
          case 96: break;
          case 37: 
            { return symbol(sym.stringConstant, yytext());
            }
          case 97: break;
          case 38: 
            { return symbol(sym.hexConstant, yytext());
            }
          case 98: break;
          case 39: 
            { return symbol(sym.THIS, yytext());
            }
          case 99: break;
          case 40: 
            { return symbol(sym.ELSE, yytext());
            }
          case 100: break;
          case 41: 
            { return symbol(sym.VOID, yytext());
            }
          case 101: break;
          case 42: 
            { return symbol(sym.NULL, yytext());
            }
          case 102: break;
          case 43: 
            { return symbol(sym.BOOL, yytext());
            }
          case 103: break;
          case 44: 
            { return symbol(sym.BREAK, yytext());
            }
          case 104: break;
          case 45: 
            { return symbol(sym.CLASS, yytext());
            }
          case 105: break;
          case 46: 
            { return symbol(sym.WHILE, yytext());
            }
          case 106: break;
          case 47: 
            { return symbol(sym.PRINT, yytext());
            }
          case 107: break;
          case 48: 
            { return symbol(sym.RETURN, yytext());
            }
          case 108: break;
          case 49: 
            { return symbol(sym.boolConstant, yytext());
            }
          case 109: break;
          case 50: 
            { return symbol(sym.STRING, yytext());
            }
          case 110: break;
          case 51: 
            { return symbol(sym.DOUBLE, yytext());
            }
          case 111: break;
          case 52: 
            { return symbol(sym.MALLOC, yytext());
            }
          case 112: break;
          case 53: 
            { return symbol(sym.EXTENDS, yytext());
            }
          case 113: break;
          case 54: 
            { return symbol(sym.GETBYTE, yytext());
            }
          case 114: break;
          case 55: 
            { return symbol(sym.SETBYTE, yytext());
            }
          case 115: break;
          case 56: 
            { return symbol(sym.NEWARRAY, yytext());
            }
          case 116: break;
          case 57: 
            { return symbol(sym.READLINE, yytext());
            }
          case 117: break;
          case 58: 
            { return symbol(sym.INTERFACE, yytext());
            }
          case 118: break;
          case 59: 
            { return symbol(sym.IMPLEMENTS, yytext());
            }
          case 119: break;
          case 60: 
            { return symbol(sym.READINTEGER, yytext());
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
