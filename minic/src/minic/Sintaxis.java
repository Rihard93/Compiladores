
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 21 00:08:03 CST 2018
//----------------------------------------------------

package minic;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 21 00:08:03 CST 2018
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\004\000" +
    "\002\004\004\000\002\005\005\000\002\052\003\000\002" +
    "\052\002\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\007\004\000\002\007\004\000\002\040\007\000" +
    "\002\010\004\000\002\010\002\000\002\047\005\000\002" +
    "\047\002\000\002\053\002\000\002\054\002\000\002\011" +
    "\013\000\002\034\004\000\002\034\002\000\002\035\004" +
    "\000\002\035\002\000\002\036\005\000\002\036\003\000" +
    "\002\044\004\000\002\044\002\000\002\012\003\000\002" +
    "\012\003\000\002\055\002\000\002\013\010\000\002\045" +
    "\004\000\002\045\002\000\002\014\004\000\002\014\004" +
    "\000\002\037\007\000\002\015\005\000\002\051\004\000" +
    "\002\051\002\000\002\050\003\000\002\050\003\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\041\003\000\002\041\002\000" +
    "\002\017\010\000\002\043\004\000\002\043\002\000\002" +
    "\020\007\000\002\021\013\000\002\022\005\000\002\023" +
    "\004\000\002\024\007\000\002\042\005\000\002\042\003" +
    "\000\002\025\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\004\000\002\025\006\000\002\025" +
    "\010\000\002\025\005\000\002\025\005\000\002\025\006" +
    "\000\002\026\003\000\002\026\003\000\002\027\003\000" +
    "\002\027\005\000\002\027\006\000\002\030\006\000\002" +
    "\030\006\000\002\030\006\000\002\046\005\000\002\031" +
    "\006\000\002\031\010\000\002\032\003\000\002\032\002" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\030\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\033\uffff\071\uffff" +
    "\001\002\000\030\002\015\003\017\004\026\005\007\006" +
    "\027\007\023\010\014\011\006\012\020\033\005\071\010" +
    "\001\002\000\010\033\ufff0\063\ufff0\066\ufff0\001\002\000" +
    "\004\033\306\001\002\000\010\033\ufff4\063\ufff4\066\ufff4" +
    "\001\002\000\014\005\ufff6\006\ufff6\007\ufff6\010\ufff6\033" +
    "\ufff6\001\002\000\030\002\001\003\001\004\001\005\001" +
    "\006\001\007\001\010\001\011\001\012\001\033\001\071" +
    "\001\001\002\000\030\002\ufffc\003\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\033\ufffc\071" +
    "\ufffc\001\002\000\006\033\031\066\237\001\002\000\010" +
    "\033\ufff1\063\ufff1\066\ufff1\001\002\000\004\002\000\001" +
    "\002\000\030\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\033\ufffb\071\ufffb\001" +
    "\002\000\006\055\304\065\303\001\002\000\004\033\264" +
    "\001\002\000\004\055\263\001\002\000\030\002\ufffd\003" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\033\ufffd\071\ufffd\001\002\000\010\033\ufff2\063" +
    "\ufff2\066\ufff2\001\002\000\030\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\033" +
    "\ufffe\071\ufffe\001\002\000\014\005\007\006\027\007\023" +
    "\010\014\033\005\001\002\000\004\033\031\001\002\000" +
    "\010\033\ufff3\063\ufff3\066\ufff3\001\002\000\032\002\uffed" +
    "\003\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\012\uffed\033\uffed\065\uffed\071\uffed\001\002\000\004" +
    "\062\032\001\002\000\020\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\033\uffe8\063\uffea\071\uffe8\001\002\000\016\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\033\ufff5\071\010\001\002\000" +
    "\004\063\035\001\002\000\004\064\036\001\002\000\074" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\013\064\014\060\017" +
    "\050\020\072\021\057\023\061\024\065\025\062\026\054" +
    "\027\105\030\053\031\041\032\100\033\066\037\051\054" +
    "\046\055\uffc5\062\077\064\036\065\uffd1\071\010\072\047" +
    "\073\044\074\055\075\052\001\002\000\032\002\uffec\003" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\033\uffec\065\uffec\071\uffec\001\002\000\076\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\013\uffc9\014\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\037\uffc9" +
    "\054\uffc9\055\uffc9\062\uffc9\064\uffc9\065\uffc9\071\uffc9\072" +
    "\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000\004\062\255" +
    "\001\002\000\050\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\063\uffb9\001\002\000\076\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\013\uffcb\014\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\037\uffcb\054\uffcb\055\uffcb\062" +
    "\uffcb\064\uffcb\065\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\001\002\000\050\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92" +
    "\051\uff92\052\uff92\053\uff92\055\uff92\056\uff92\057\uff92\060" +
    "\uff92\061\uff92\063\uff92\001\002\000\076\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\013\uffc8\014\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\037\uffc8\054\uffc8\055" +
    "\uffc8\062\uffc8\064\uffc8\065\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\040\013\064\014\060\025" +
    "\062\026\054\030\053\031\041\032\100\033\066\037\051" +
    "\054\046\062\077\072\047\073\044\074\055\075\052\001" +
    "\002\000\050\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93\052" +
    "\uff93\053\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93" +
    "\063\uff93\001\002\000\004\062\244\001\002\000\040\013" +
    "\064\014\060\025\062\026\054\030\053\031\041\032\100" +
    "\033\066\037\051\054\046\062\077\072\047\073\044\074" +
    "\055\075\052\001\002\000\050\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\055\uff90\056\uff90\057\uff90" +
    "\060\uff90\061\uff90\063\uff90\001\002\000\004\062\241\001" +
    "\002\000\004\062\233\001\002\000\050\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\055\uff91\056\uff91" +
    "\057\uff91\060\uff91\061\uff91\063\uff91\001\002\000\076\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\037\uffcc" +
    "\054\uffcc\055\uffcc\062\uffcc\064\uffcc\065\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\075\uffcc\001\002\000\004\062\224" +
    "\001\002\000\040\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\055\uffb7\056\uffb7" +
    "\057\uffb7\060\uffb7\061\uffb7\063\uffb7\001\002\000\042\013" +
    "\064\014\060\025\062\026\054\030\053\031\041\032\100" +
    "\033\066\037\051\054\046\055\uffc5\062\077\072\047\073" +
    "\044\074\055\075\052\001\002\000\004\062\217\001\002" +
    "\000\076\005\uffc7\006\uffc7\007\uffc7\010\uffc7\013\uffc7\014" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\037\uffc7\054\uffc7\055\uffc7\062\uffc7\064\uffc7\065\uffc7" +
    "\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\001\002\000" +
    "\050\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\063\uff8f" +
    "\001\002\000\004\055\216\001\002\000\054\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\213\063\uff9e" +
    "\001\002\000\076\005\uffcd\006\uffcd\007\uffcd\010\uffcd\013" +
    "\uffcd\014\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\037\uffcd\054\uffcd\055\uffcd\062\uffcd\064\uffcd" +
    "\065\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd\001" +
    "\002\000\034\042\116\043\125\044\115\045\121\046\122" +
    "\050\127\051\117\052\120\053\126\055\uffc6\057\123\060" +
    "\124\063\uffc6\001\002\000\012\036\203\037\204\040\206" +
    "\041\205\001\002\000\004\062\177\001\002\000\042\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\175\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\063\uffb8\001\002\000\074\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\013\uffd0\014\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\037\uffd0\054\uffd0\055\uffd0\062" +
    "\uffd0\064\uffd0\065\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0" +
    "\075\uffd0\001\002\000\004\065\174\001\002\000\074\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\013\uffcf\014\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\037\uffcf\054\uffcf" +
    "\055\uffcf\062\uffcf\064\uffcf\065\uffcf\071\uffcf\072\uffcf\073" +
    "\uffcf\074\uffcf\075\uffcf\001\002\000\040\013\064\014\060" +
    "\025\062\026\054\030\053\031\041\032\100\033\066\037" +
    "\051\054\046\062\077\072\047\073\044\074\055\075\052" +
    "\001\002\000\004\062\167\001\002\000\040\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\063" +
    "\uffb6\001\002\000\074\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\013\064\014\060\017\050\020\072\021\057\023\061\024" +
    "\065\025\062\026\054\027\105\030\053\031\041\032\100" +
    "\033\066\037\051\054\046\055\uffc5\062\077\064\036\065" +
    "\uffd1\071\010\072\047\073\044\074\055\075\052\001\002" +
    "\000\076\005\uffca\006\uffca\007\uffca\010\uffca\013\uffca\014" +
    "\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\037\uffca\054\uffca\055\uffca\062\uffca\064\uffca\065\uffca" +
    "\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\001\002\000" +
    "\004\055\165\001\002\000\004\062\106\001\002\000\040" +
    "\013\064\014\060\025\062\026\054\030\053\031\041\032" +
    "\100\033\066\037\051\054\046\062\077\072\047\073\044" +
    "\074\055\075\052\001\002\000\034\042\116\043\125\044" +
    "\115\045\121\046\122\050\127\051\117\052\120\053\126" +
    "\056\uffbb\057\123\060\124\063\uffbb\001\002\000\006\056" +
    "\111\063\112\001\002\000\040\013\064\014\060\025\062" +
    "\026\054\030\053\031\041\032\100\033\066\037\051\054" +
    "\046\062\077\072\047\073\044\074\055\075\052\001\002" +
    "\000\004\055\113\001\002\000\076\005\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\013\uffbd\014\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\037\uffbd\054\uffbd\055\uffbd" +
    "\062\uffbd\064\uffbd\065\uffbd\071\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\001\002\000\034\042\116\043\125\044\115" +
    "\045\121\046\122\050\127\051\117\052\120\053\126\056" +
    "\uffbc\057\123\060\124\063\uffbc\001\002\000\040\013\064" +
    "\014\060\025\062\026\054\030\053\031\041\032\100\033" +
    "\066\037\051\054\046\062\077\072\047\073\044\074\055" +
    "\075\052\001\002\000\040\013\064\014\060\025\062\026" +
    "\054\030\053\031\041\032\100\033\066\037\051\054\046" +
    "\062\077\072\047\073\044\074\055\075\052\001\002\000" +
    "\040\013\064\014\060\025\062\026\054\030\053\031\041" +
    "\032\100\033\066\037\051\054\046\062\077\072\047\073" +
    "\044\074\055\075\052\001\002\000\040\013\064\014\060" +
    "\025\062\026\054\030\053\031\041\032\100\033\066\037" +
    "\051\054\046\062\077\072\047\073\044\074\055\075\052" +
    "\001\002\000\040\013\064\014\060\025\062\026\054\030" +
    "\053\031\041\032\100\033\066\037\051\054\046\062\077" +
    "\072\047\073\044\074\055\075\052\001\002\000\040\013" +
    "\064\014\060\025\062\026\054\030\053\031\041\032\100" +
    "\033\066\037\051\054\046\062\077\072\047\073\044\074" +
    "\055\075\052\001\002\000\010\033\137\034\135\035\136" +
    "\001\002\000\040\013\064\014\060\025\062\026\054\030" +
    "\053\031\041\032\100\033\066\037\051\054\046\062\077" +
    "\072\047\073\044\074\055\075\052\001\002\000\040\013" +
    "\064\014\060\025\062\026\054\030\053\031\041\032\100" +
    "\033\066\037\051\054\046\062\077\072\047\073\044\074" +
    "\055\075\052\001\002\000\040\013\064\014\060\025\062" +
    "\026\054\030\053\031\041\032\100\033\066\037\051\054" +
    "\046\062\077\072\047\073\044\074\055\075\052\001\002" +
    "\000\040\013\064\014\060\025\062\026\054\030\053\031" +
    "\041\032\100\033\066\037\051\054\046\062\077\072\047" +
    "\073\044\074\055\075\052\001\002\000\040\042\uffaa\043" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\063" +
    "\uffaa\001\002\000\040\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\063\uffa7\001\002\000\040" +
    "\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\055\uffae\056\uffae\057\uffae\060\uffae" +
    "\061\uffae\063\uffae\001\002\000\032\042\116\043\125\044" +
    "\115\045\121\046\122\050\127\051\117\052\120\053\126" +
    "\057\123\060\124\061\134\001\002\000\042\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061" +
    "\uff9c\063\uff9c\001\002\000\004\062\154\001\002\000\004" +
    "\062\147\001\002\000\044\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\141\063" +
    "\uff9d\001\002\000\004\062\141\001\002\000\042\013\064" +
    "\014\060\025\062\026\054\030\053\031\041\032\100\033" +
    "\066\037\051\054\046\062\077\063\uff94\072\047\073\044" +
    "\074\055\075\052\001\002\000\040\042\uff99\043\uff99\044" +
    "\uff99\045\uff99\046\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\063\uff99\001" +
    "\002\000\004\063\145\001\002\000\006\056\111\063\uff95" +
    "\001\002\000\040\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\050\uff98\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\063\uff98\001\002\000\040\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\063\uff9a\001\002\000\040\013\064\014\060\025\062" +
    "\026\054\030\053\031\041\032\100\033\066\037\051\054" +
    "\046\062\077\072\047\073\044\074\055\075\052\001\002" +
    "\000\032\042\116\043\125\044\115\045\121\046\122\050" +
    "\127\051\117\052\120\053\126\056\151\057\123\060\124" +
    "\001\002\000\040\013\064\014\060\025\062\026\054\030" +
    "\053\031\041\032\100\033\066\037\051\054\046\062\077" +
    "\072\047\073\044\074\055\075\052\001\002\000\032\042" +
    "\116\043\125\044\115\045\121\046\122\050\127\051\117" +
    "\052\120\053\126\057\123\060\124\063\153\001\002\000" +
    "\004\062\uff96\001\002\000\040\013\064\014\060\025\062" +
    "\026\054\030\053\031\041\032\100\033\066\037\051\054" +
    "\046\062\077\072\047\073\044\074\055\075\052\001\002" +
    "\000\032\042\116\043\125\044\115\045\121\046\122\050" +
    "\127\051\117\052\120\053\126\057\123\060\124\063\156" +
    "\001\002\000\004\062\uff97\001\002\000\040\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\063" +
    "\uffab\001\002\000\040\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\050\uffac\051\uffac\052\uffac\053\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\063\uffac\001\002\000\040" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\063\uffa8\001\002\000\040\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9\001" +
    "\002\000\040\042\uffb0\043\125\044\115\045\121\046\122" +
    "\050\127\051\117\052\120\053\126\055\uffb0\056\uffb0\057" +
    "\uffb0\060\uffb0\061\uffb0\063\uffb0\001\002\000\040\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052" +
    "\uffad\053\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad" +
    "\063\uffad\001\002\000\076\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\013\uffce\014\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\037\uffce\054\uffce\055\uffce\062\uffce" +
    "\064\uffce\065\uffce\071\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\001\002\000\004\065\uffd2\001\002\000\040\013\064" +
    "\014\060\025\062\026\054\030\053\031\041\032\100\033" +
    "\066\037\051\054\046\062\077\072\047\073\044\074\055" +
    "\075\052\001\002\000\032\042\116\043\125\044\115\045" +
    "\121\046\122\050\127\051\117\052\120\053\126\057\123" +
    "\060\124\063\171\001\002\000\040\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\063\uffa1\001" +
    "\002\000\032\042\116\043\125\044\115\045\121\046\122" +
    "\050\127\051\117\052\120\053\126\057\123\060\124\063" +
    "\173\001\002\000\040\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\063\uffb5\001\002\000\110" +
    "\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\037\uffd3\054\uffd3" +
    "\055\uffd3\062\uffd3\064\uffd3\065\uffd3\071\uffd3\072\uffd3\073" +
    "\uffd3\074\uffd3\075\uffd3\001\002\000\040\013\064\014\060" +
    "\025\062\026\054\030\053\031\041\032\100\033\066\037" +
    "\051\054\046\062\077\072\047\073\044\074\055\075\052" +
    "\001\002\000\040\042\116\043\125\044\115\045\121\046" +
    "\122\050\127\051\117\052\120\053\126\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\063\uffba\001\002\000\040\013" +
    "\064\014\060\025\062\026\054\030\053\031\041\032\100" +
    "\033\066\037\051\054\046\062\077\072\047\073\044\074" +
    "\055\075\052\001\002\000\032\042\116\043\125\044\115" +
    "\045\121\046\122\050\127\051\117\052\120\053\126\057" +
    "\123\060\124\063\201\001\002\000\060\013\064\014\060" +
    "\017\050\020\072\021\057\023\061\024\065\025\062\026" +
    "\054\027\105\030\053\031\041\032\100\033\066\037\051" +
    "\054\046\055\uffc5\062\077\064\036\072\047\073\044\074" +
    "\055\075\052\001\002\000\076\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\013\uffc1\014\uffc1\017\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\033\uffc1\037\uffc1\054\uffc1\055\uffc1\062" +
    "\uffc1\064\uffc1\065\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1" +
    "\075\uffc1\001\002\000\040\013\064\014\060\025\062\026" +
    "\054\030\053\031\041\032\100\033\066\037\051\054\046" +
    "\062\077\072\047\073\044\074\055\075\052\001\002\000" +
    "\040\013\064\014\060\025\062\026\054\030\053\031\041" +
    "\032\100\033\066\037\051\054\046\062\077\072\047\073" +
    "\044\074\055\075\052\001\002\000\040\013\064\014\060" +
    "\025\062\026\054\030\053\031\041\032\100\033\066\037" +
    "\051\054\046\062\077\072\047\073\044\074\055\075\052" +
    "\001\002\000\040\013\064\014\060\025\062\026\054\030" +
    "\053\031\041\032\100\033\066\037\051\054\046\062\077" +
    "\072\047\073\044\074\055\075\052\001\002\000\040\042" +
    "\uffb2\043\125\044\115\045\121\046\122\050\127\051\117" +
    "\052\120\053\126\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061" +
    "\uffb2\063\uffb2\001\002\000\040\042\uffb1\043\125\044\115" +
    "\045\121\046\122\050\127\051\117\052\120\053\126\055" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\063\uffb1\001\002" +
    "\000\040\042\uffb3\043\125\044\115\045\121\046\122\050" +
    "\127\051\117\052\120\053\126\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\063\uffb3\001\002\000\040\042\uffb4\043" +
    "\125\044\115\045\121\046\122\050\127\051\117\052\120" +
    "\053\126\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\063" +
    "\uffb4\001\002\000\042\013\064\014\060\025\062\026\054" +
    "\030\053\031\041\032\100\033\066\037\051\054\046\062" +
    "\077\063\uff94\072\047\073\044\074\055\075\052\001\002" +
    "\000\004\063\215\001\002\000\040\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b\001" +
    "\002\000\076\005\uffbe\006\uffbe\007\uffbe\010\uffbe\013\uffbe" +
    "\014\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\037\uffbe\054\uffbe\055\uffbe\062\uffbe\064\uffbe\065" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002" +
    "\000\004\033\220\001\002\000\004\063\221\001\002\000" +
    "\040\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5\060" +
    "\uffa5\061\uffa5\063\uffa5\001\002\000\004\055\223\001\002" +
    "\000\076\005\uffbf\006\uffbf\007\uffbf\010\uffbf\013\uffbf\014" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\037\uffbf\054\uffbf\055\uffbf\062\uffbf\064\uffbf\065\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000" +
    "\040\013\064\014\060\025\062\026\054\030\053\031\041" +
    "\032\100\033\066\037\051\054\046\062\077\072\047\073" +
    "\044\074\055\075\052\001\002\000\032\042\116\043\125" +
    "\044\115\045\121\046\122\050\127\051\117\052\120\053" +
    "\126\057\123\060\124\063\226\001\002\000\060\013\064" +
    "\014\060\017\050\020\072\021\057\023\061\024\065\025" +
    "\062\026\054\027\105\030\053\031\041\032\100\033\066" +
    "\037\051\054\046\055\uffc5\062\077\064\036\072\047\073" +
    "\044\074\055\075\052\001\002\000\076\005\uffc2\006\uffc2" +
    "\007\uffc2\010\uffc2\013\uffc2\014\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\230\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\037\uffc2\054\uffc2\055" +
    "\uffc2\062\uffc2\064\uffc2\065\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\001\002\000\060\013\064\014\060\017" +
    "\050\020\072\021\057\023\061\024\065\025\062\026\054" +
    "\027\105\030\053\031\041\032\100\033\066\037\051\054" +
    "\046\055\uffc5\062\077\064\036\072\047\073\044\074\055" +
    "\075\052\001\002\000\076\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\013\uffc4\014\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\037\uffc4\054\uffc4\055\uffc4\062\uffc4" +
    "\064\uffc4\065\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\001\002\000\076\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\013\uffc3\014\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\037\uffc3\054\uffc3\055\uffc3\062\uffc3\064" +
    "\uffc3\065\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\001\002\000\040\013\064\014\060\025\062\026\054\030" +
    "\053\031\041\032\100\033\066\037\051\054\046\062\077" +
    "\072\047\073\044\074\055\075\052\001\002\000\032\042" +
    "\116\043\125\044\115\045\121\046\122\050\127\051\117" +
    "\052\120\053\126\056\235\057\123\060\124\001\002\000" +
    "\014\005\007\006\027\007\023\010\014\033\005\001\002" +
    "\000\006\063\240\066\237\001\002\000\010\033\uffef\063" +
    "\uffef\066\uffef\001\002\000\040\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\063\uffa4\001\002" +
    "\000\004\063\242\001\002\000\040\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\063\uffa3\001" +
    "\002\000\040\042\uffaf\043\125\044\115\045\121\046\122" +
    "\050\127\051\117\052\120\053\126\055\uffaf\056\uffaf\057" +
    "\uffaf\060\uffaf\061\uffaf\063\uffaf\001\002\000\042\013\064" +
    "\014\060\025\062\026\054\030\053\031\041\032\100\033" +
    "\066\037\051\054\046\055\uffc5\062\077\072\047\073\044" +
    "\074\055\075\052\001\002\000\004\055\246\001\002\000" +
    "\040\013\064\014\060\025\062\026\054\030\053\031\041" +
    "\032\100\033\066\037\051\054\046\062\077\072\047\073" +
    "\044\074\055\075\052\001\002\000\032\042\116\043\125" +
    "\044\115\045\121\046\122\050\127\051\117\052\120\053" +
    "\126\055\250\057\123\060\124\001\002\000\042\013\064" +
    "\014\060\025\062\026\054\030\053\031\041\032\100\033" +
    "\066\037\051\054\046\062\077\063\uffc5\072\047\073\044" +
    "\074\055\075\052\001\002\000\004\063\252\001\002\000" +
    "\060\013\064\014\060\017\050\020\072\021\057\023\061" +
    "\024\065\025\062\026\054\027\105\030\053\031\041\032" +
    "\100\033\066\037\051\054\046\055\uffc5\062\077\064\036" +
    "\072\047\073\044\074\055\075\052\001\002\000\076\005" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\013\uffc0\014\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\037\uffc0" +
    "\054\uffc0\055\uffc0\062\uffc0\064\uffc0\065\uffc0\071\uffc0\072" +
    "\uffc0\073\uffc0\074\uffc0\075\uffc0\001\002\000\040\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\063\uffa6\001\002\000\004\063\256\001\002\000\040\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\063\uffa2\001\002\000\006\056\260\063\uffeb\001\002" +
    "\000\016\005\uffe9\006\uffe9\007\uffe9\010\uffe9\033\uffe9\071" +
    "\uffe9\001\002\000\006\033\262\066\237\001\002\000\010" +
    "\055\ufff7\056\ufff7\063\ufff7\001\002\000\106\002\ufff8\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\017\ufff8\020\ufff8\021\ufff8\023" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\037\ufff8\054\ufff8\055\ufff8\062\ufff8\064" +
    "\ufff8\065\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\001\002\000\004\064\uffda\001\002\000\004\064\266\001" +
    "\002\000\020\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\033\uffd7\065\uffd7\001\002\000\020\004\272\005\007\006" +
    "\027\007\023\010\014\033\005\065\271\001\002\000\006" +
    "\033\275\066\237\001\002\000\030\002\uffd9\003\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\033\uffd9\071\uffd9\001\002\000\004\033\275\001\002\000" +
    "\020\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\033\uffd8" +
    "\065\uffd8\001\002\000\020\004\uffd5\005\uffd5\006\uffd5\007" +
    "\uffd5\010\uffd5\033\uffd5\065\uffd5\001\002\000\004\062\276" +
    "\001\002\000\020\005\uffe8\006\uffe8\007\uffe8\010\uffe8\033" +
    "\uffe8\063\uffea\071\uffe8\001\002\000\004\063\300\001\002" +
    "\000\004\055\301\001\002\000\020\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\033\uffd4\065\uffd4\001\002\000\020" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\033\uffd6\065" +
    "\uffd6\001\002\000\030\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\033\ufff9\071" +
    "\ufff9\001\002\000\030\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\033\ufffa\071" +
    "\ufffa\001\002\000\032\002\uffee\003\uffee\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\033\uffee\065" +
    "\uffee\071\uffee\001\002\000\010\015\310\016\uffe3\064\uffe3" +
    "\001\002\000\006\016\uffe7\064\uffe7\001\002\000\004\033" +
    "\311\001\002\000\006\016\uffe4\064\uffe4\001\002\000\006" +
    "\016\314\064\uffe1\001\002\000\004\064\uffe6\001\002\000" +
    "\004\033\316\001\002\000\006\056\317\064\uffe2\001\002" +
    "\000\006\056\uffdf\064\uffdf\001\002\000\004\033\320\001" +
    "\002\000\006\056\uffe0\064\uffe0\001\002\000\004\064\322" +
    "\001\002\000\022\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\033\uffdd\065\uffdd\071\uffdd\001\002\000\022\004\026" +
    "\005\007\006\027\007\023\010\014\033\005\065\325\071" +
    "\010\001\002\000\022\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\033\uffdc\065\uffdc\071\uffdc\001\002\000\030\002" +
    "\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\033\uffe5\071\uffe5\001\002\000\022\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\033\uffde\065\uffde" +
    "\071\uffde\001\002\000\022\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\033\uffdb\065\uffdb\071\uffdb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\004\002\003\001\001\000\022\003\010\004" +
    "\023\005\020\006\012\007\021\011\011\013\015\052\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\260\001\001\000\004\040\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\033\047\032\001\001\000\006\005\256" +
    "\052\024\001\001\000\002\001\001\000\004\015\036\001" +
    "\001\000\050\004\073\005\020\015\062\016\075\017\066" +
    "\020\055\021\042\022\037\023\102\024\044\025\067\026" +
    "\070\027\072\030\100\033\041\041\103\050\101\051\074" +
    "\052\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\253\026\070\027" +
    "\072\030\100\033\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\025\242\026\070\027\072\030\100\033" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\025\067\026\070\027\072" +
    "\030\100\033\041\041\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\171\026" +
    "\070\027\072\030\100\033\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\073\005\020\015\062\016" +
    "\075\017\066\020\055\021\042\022\037\023\102\024\044" +
    "\025\067\026\070\027\072\030\100\033\041\041\103\050" +
    "\101\051\165\052\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\025\106\026\070\027" +
    "\072\030\100\033\041\042\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\113\026\070\027\072\030" +
    "\100\033\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\163\026\070\027\072\030" +
    "\100\033\041\001\001\000\014\025\162\026\070\027\072" +
    "\030\100\033\041\001\001\000\014\025\161\026\070\027" +
    "\072\030\100\033\041\001\001\000\014\025\160\026\070" +
    "\027\072\030\100\033\041\001\001\000\014\025\157\026" +
    "\070\027\072\030\100\033\041\001\001\000\014\025\156" +
    "\026\070\027\072\030\100\033\041\001\001\000\004\031" +
    "\137\001\001\000\014\025\132\026\070\027\072\030\100" +
    "\033\041\001\001\000\014\025\131\026\070\027\072\030" +
    "\100\033\041\001\001\000\014\025\130\026\070\027\072" +
    "\030\100\033\041\001\001\000\014\025\127\026\070\027" +
    "\072\030\100\033\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\145" +
    "\001\001\000\004\046\141\001\001\000\020\025\106\026" +
    "\070\027\072\030\100\032\142\033\041\042\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\147\026\070" +
    "\027\072\030\100\033\041\001\001\000\002\001\001\000" +
    "\014\025\151\026\070\027\072\030\100\033\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\025\154\026" +
    "\070\027\072\030\100\033\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\167\026\070\027\072\030\100\033\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\175\026\070\027\072" +
    "\030\100\033\041\001\001\000\002\001\001\000\014\025" +
    "\177\026\070\027\072\030\100\033\041\001\001\000\002" +
    "\001\001\000\036\015\062\016\201\017\066\020\055\021" +
    "\042\022\037\023\102\024\044\025\067\026\070\027\072" +
    "\030\100\033\041\041\103\001\001\000\002\001\001\000" +
    "\014\025\211\026\070\027\072\030\100\033\041\001\001" +
    "\000\014\025\210\026\070\027\072\030\100\033\041\001" +
    "\001\000\014\025\207\026\070\027\072\030\100\033\041" +
    "\001\001\000\014\025\206\026\070\027\072\030\100\033" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\025\106\026\070\027" +
    "\072\030\100\032\213\033\041\042\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\224\026\070\027\072\030" +
    "\100\033\041\001\001\000\002\001\001\000\036\015\062" +
    "\016\226\017\066\020\055\021\042\022\037\023\102\024" +
    "\044\025\067\026\070\027\072\030\100\033\041\041\103" +
    "\001\001\000\004\043\230\001\001\000\036\015\062\016" +
    "\231\017\066\020\055\021\042\022\037\023\102\024\044" +
    "\025\067\026\070\027\072\030\100\033\041\041\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\233" +
    "\026\070\027\072\030\100\033\041\001\001\000\002\001" +
    "\001\000\004\006\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\025\067\026\070\027\072" +
    "\030\100\033\041\041\244\001\001\000\002\001\001\000" +
    "\014\025\246\026\070\027\072\030\100\033\041\001\001" +
    "\000\002\001\001\000\016\025\067\026\070\027\072\030" +
    "\100\033\041\041\250\001\001\000\002\001\001\000\036" +
    "\015\062\016\252\017\066\020\055\021\042\022\037\023" +
    "\102\024\044\025\067\026\070\027\072\030\100\033\041" +
    "\041\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\264\001\001\000\002\001\001\000\004" +
    "\045\266\001\001\000\006\006\267\014\272\001\001\000" +
    "\004\037\301\001\001\000\002\001\001\000\004\037\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\276\047\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\306\001\001\000\004\053\311\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\312\001\001\000\004" +
    "\054\320\001\001\000\004\036\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\322\001\001\000\016\004" +
    "\323\005\020\006\012\007\326\012\325\052\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append("Sintactico: simbolo: " + s.value.toString()+ " no reconocido.");
            if (s.left >= 0) {                
                m.append(" linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
            Sintaxis asin = new Sintaxis(
                    new Lexer( new FileReader(args[0])));
            Object result = asin.parse().value;            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Constant ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Constant ::= stringConstant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Constant ::= boolConstant 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Constant ::= doubleConstant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Constant ::= intConstant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Actuals",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Actuals ::= ExprPrint 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Actuals",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LibCall ::= SETBYTE LPAR Expr COMMA Expr RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LibCall",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LibCall ::= GETBYTE LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LibCall",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CallCont ::= LPAR Actuals RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CallCont",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Call ::= Expr PERIOD LibCall CallCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Call ::= Expr PERIOD IDENT CallCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Call ::= IDENT LPAR Actuals RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LValue ::= Expr LCOR Expr RCOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LValue ::= Expr PERIOD IDENT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LValue ::= IDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr1 ::= IDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr1",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr1 ::= Constant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr1",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= MALLOC LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= READLINE LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= READINTEGER LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= NEWARRAY LPAR Expr COMMA Type RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= NEW LPAR IDENT RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= EXCLAM Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr AMPERSONS Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr NOTEQ Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr EQTO Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr GREATEREQ Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr GREATER Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr LESSEQ Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr LESS Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr MOD Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr1 DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "/" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr1 TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "*" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr1 MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "-" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr1 PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "+" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= THIS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= LValue 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Constant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= LValue EQUALS Expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 
    Env.Validar(v.toString(), e.toString());

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExprPrint ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ExprPrint",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExprPrint ::= ExprPrint COMMA Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ExprPrint",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PrintStmt ::= PRINT LPAR ExprPrint RPAR SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PrintStmt",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BreakStmt ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("BreakStmt",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnStmt ::= RETURN StmtExpr SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ReturnStmt",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ForStmt ::= FOR LPAR StmtExpr SEMI Expr SEMI StmtExpr RPAR Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ForStmt",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStmt ::= WHILE LPAR Expr RPAR Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WhileStmt",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ElseIfStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ElseIfStmt ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfStmt ::= IF LPAR Expr RPAR Stmt ElseIfStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IfStmt",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtExpr ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtExpr",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StmtExpr ::= Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtExpr",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stmt ::= StmtExpr SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtEnd ::= Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtEnd",38, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // StmtEnd ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtEnd",38, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // StmtCont ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtCont",39, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // StmtCont ::= StmtEnd StmtCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtCont",39, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StmtBlock ::= LLLAV StmtCont RLLAV 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ProtCont ::= IDENT LPAR Formals RPAR SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ProtCont",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Prototype ::= VOID ProtCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Prototype ::= Type ProtCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InterfaceProt ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceProt",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // InterfaceProt ::= InterfaceProt Prototype 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceProt",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // InterfaceDecl ::= INTERFACE IDENT NT$2 LLLAV InterfaceProt RLLAV 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
 if(Env.putClass(n1.toString(),null,null) != 0) System.out.println("  La interfaz " + n1 + " ya ha sido declarada en el ambito actual"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassField ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassField",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ClassField ::= ClassField Field 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassField",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ImpID ::= IDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ImpID",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ImpID ::= ImpID COMMA IDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ImpID",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Imp ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Imp",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Imp ::= IMPLEMENTS ImpID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Imp",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Ext ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Ext",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Ext ::= EXTENDS IDENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = n1; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Ext",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ClassDecl ::= CLASS IDENT Ext NT$0 Imp NT$1 LLLAV ClassField RLLAV 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;
		
      System.out.print("  Saliendo de la clase: "+n1);
      Env.pop();
 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;


    if(n3 == null)
    {
        
    }
    else
    {   
        boolean R = Env.getInterfaces(n3.toString());

        if(R == false)
        {
            System.out.println("  La interfaz " + n3 + " no existe en el ambito actual");
        }
    }
 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;

    if(n2 == null)
    {
        if(Env.putClass(n1.toString(),null,"class") != 0)
        {
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
        }
    }
    else
    {
        switch(Env.putClass(n1.toString(),n2.toString(),"class"))
        {
            case 1:
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
            break;

            case 2:
            System.out.println("  La clase " + n2 + " no existe en el ambito actual");
            break;                
        } 
    }

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FormalsCont ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FormalsCont",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FormalsCont ::= FormalsCont Variable COMMA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FormalsCont",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Formals ::= FormalsCont Variable 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FuncCont ::= IDENT LPAR Formals RPAR StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FuncCont",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionDecl ::= VOID FuncCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionDecl ::= Type FuncCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= Type CORS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= IDENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = n1.toString(); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarConstant ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VarConstant",40, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarConstant ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VarConstant",40, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Variable ::= VarConstant Type IDENT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 if (!Env.put(I,t))  System.out.println("  La variable " + I + " ya ha sido declarada en el ambito actual"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableDecl ::= Variable SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error RLLAV 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program Decl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

