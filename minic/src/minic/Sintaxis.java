
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 22 01:40:33 CST 2018
//----------------------------------------------------

package minic;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 22 01:40:33 CST 2018
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\004\000" +
    "\002\004\004\000\002\004\005\000\002\005\004\000\002" +
    "\052\003\000\002\052\002\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\004\000\002\007\003\000" +
    "\002\053\002\000\002\054\002\000\002\040\012\000\002" +
    "\010\004\000\002\010\002\000\002\047\005\000\002\047" +
    "\002\000\002\055\002\000\002\011\012\000\002\034\004" +
    "\000\002\034\002\000\002\035\004\000\002\035\002\000" +
    "\002\036\005\000\002\036\003\000\002\044\004\000\002" +
    "\044\002\000\002\012\003\000\002\012\003\000\002\056" +
    "\002\000\002\013\010\000\002\045\004\000\002\045\002" +
    "\000\002\014\004\000\002\014\004\000\002\037\007\000" +
    "\002\057\002\000\002\060\002\000\002\015\007\000\002" +
    "\051\004\000\002\051\002\000\002\050\003\000\002\050" +
    "\003\000\002\061\002\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\041\003\000\002\041\002\000\002\017\010\000\002\043" +
    "\004\000\002\043\002\000\002\020\007\000\002\021\013" +
    "\000\002\062\002\000\002\022\006\000\002\023\004\000" +
    "\002\024\007\000\002\042\005\000\002\042\003\000\002" +
    "\025\005\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\004\000\002\025\006\000\002\025\010\000" +
    "\002\025\005\000\002\025\005\000\002\025\006\000\002" +
    "\026\003\000\002\026\003\000\002\027\003\000\002\027" +
    "\005\000\002\027\006\000\002\063\002\000\002\064\002" +
    "\000\002\030\010\000\002\030\006\000\002\030\006\000" +
    "\002\046\005\000\002\031\006\000\002\031\010\000\002" +
    "\032\003\000\002\032\002\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\030\002\uffff\003\uffff\004\uffff\005\uffff\006" +
    "\uffff\007\uffff\010\uffff\011\uffff\012\uffff\033\uffff\071\uffff" +
    "\001\002\000\030\002\015\003\017\004\026\005\007\006" +
    "\027\007\023\010\014\011\005\012\020\033\006\071\010" +
    "\001\002\000\004\033\317\001\002\000\010\033\uffef\063" +
    "\uffef\066\uffef\001\002\000\010\033\ufff3\063\ufff3\066\ufff3" +
    "\001\002\000\016\004\026\005\007\006\027\007\023\010" +
    "\014\033\006\001\002\000\030\002\001\003\001\004\001" +
    "\005\001\006\001\007\001\010\001\011\001\012\001\033" +
    "\001\071\001\001\002\000\030\002\ufffc\003\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\033" +
    "\ufffc\071\ufffc\001\002\000\006\033\060\066\051\001\002" +
    "\000\010\033\ufff0\063\ufff0\066\ufff0\001\002\000\004\002" +
    "\000\001\002\000\030\002\ufffb\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\033\ufffb\071" +
    "\ufffb\001\002\000\006\055\057\065\056\001\002\000\004" +
    "\033\031\001\002\000\004\055\030\001\002\000\030\002" +
    "\ufffd\003\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\033\ufffd\071\ufffd\001\002\000\010\033" +
    "\ufff1\063\ufff1\066\ufff1\001\002\000\030\002\ufffe\003\ufffe" +
    "\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\033\ufffe\071\ufffe\001\002\000\032\002\uffec\003\uffec" +
    "\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\033\uffec\065\uffec\071\uffec\001\002\000\010\033\uffee" +
    "\063\uffee\066\uffee\001\002\000\010\033\ufff2\063\ufff2\066" +
    "\ufff2\001\002\000\106\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\037" +
    "\ufff8\054\ufff8\055\ufff8\062\ufff8\064\ufff8\065\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\075\ufff8\001\002\000\004\064" +
    "\uffd8\001\002\000\004\064\033\001\002\000\020\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\033\uffd5\065\uffd5\001" +
    "\002\000\020\004\037\005\007\006\027\007\023\010\014" +
    "\033\006\065\036\001\002\000\006\033\041\066\051\001" +
    "\002\000\030\002\uffd7\003\uffd7\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\012\uffd7\033\uffd7\071\uffd7\001" +
    "\002\000\006\033\uffee\066\uffee\001\002\000\020\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\033\uffd6\065\uffd6\001" +
    "\002\000\004\062\043\001\002\000\020\004\uffd3\005\uffd3" +
    "\006\uffd3\007\uffd3\010\uffd3\033\uffd3\065\uffd3\001\002\000" +
    "\020\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\033\uffe5" +
    "\063\uffe7\001\002\000\004\063\053\001\002\000\016\004" +
    "\026\005\007\006\027\007\023\010\014\033\006\001\002" +
    "\000\006\033\052\066\051\001\002\000\006\056\050\063" +
    "\uffe8\001\002\000\016\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\010\uffe6\033\uffe6\001\002\000\010\033\uffed\063\uffed\066" +
    "\uffed\001\002\000\010\055\ufff6\056\ufff6\063\ufff6\001\002" +
    "\000\004\055\054\001\002\000\020\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\033\uffd2\065\uffd2\001\002\000\020" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\033\uffd4\065" +
    "\uffd4\001\002\000\030\002\ufff9\003\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\033\ufff9\071" +
    "\ufff9\001\002\000\030\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\033\ufffa\071" +
    "\ufffa\001\002\000\006\055\ufff6\062\uffeb\001\002\000\004" +
    "\062\062\001\002\000\020\004\uffe5\005\uffe5\006\uffe5\007" +
    "\uffe5\010\uffe5\033\uffe5\063\uffe7\001\002\000\004\063\uffea" +
    "\001\002\000\004\063\065\001\002\000\004\064\066\001" +
    "\002\000\076\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\013\uffd1\014\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\037\uffd1\054\uffd1\055\uffd1\062\uffd1\064\uffd1\065" +
    "\uffd1\071\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1\001\002" +
    "\000\032\002\uffe9\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\033\uffe9\065\uffe9\071\uffe9" +
    "\001\002\000\076\004\026\005\007\006\027\007\023\010" +
    "\014\013\115\014\111\017\101\020\123\021\110\023\112" +
    "\024\116\025\113\026\105\027\136\030\104\031\072\032" +
    "\131\033\117\037\102\054\077\055\uffc0\062\130\064\066" +
    "\065\uffcd\071\010\072\100\073\075\074\106\075\103\001" +
    "\002\000\100\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\013\uffc4\014\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\037\uffc4\054\uffc4\055\uffc4\062\uffc4\064" +
    "\uffc4\065\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\001\002\000\004\062\313\001\002\000\050\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\055\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3\001\002\000\100" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\013\uffc6\014" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\037\uffc6\054\uffc6\055\uffc6\062\uffc6\064\uffc6\065\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002\000" +
    "\050\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\050\uff8a\051\uff8a\052\uff8a\053" +
    "\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\063\uff8a" +
    "\001\002\000\100\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\013\uffc3\014\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\037\uffc3\054\uffc3\055\uffc3\062\uffc3" +
    "\064\uffc3\065\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\001\002\000\040\013\115\014\111\025\113\026\105" +
    "\030\104\031\072\032\131\033\140\037\102\054\077\062" +
    "\130\072\100\073\075\074\106\075\103\001\002\000\050" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\063\uff8b\001" +
    "\002\000\004\062\302\001\002\000\040\013\115\014\111" +
    "\025\113\026\105\030\104\031\072\032\131\033\140\037" +
    "\102\054\077\062\130\072\100\073\075\074\106\075\103" +
    "\001\002\000\050\036\uff88\037\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\050\uff88\051\uff88" +
    "\052\uff88\053\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061" +
    "\uff88\063\uff88\001\002\000\004\062\277\001\002\000\004" +
    "\062\272\001\002\000\050\036\uff89\037\uff89\040\uff89\041" +
    "\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\050\uff89" +
    "\051\uff89\052\uff89\053\uff89\055\uff89\056\uff89\057\uff89\060" +
    "\uff89\061\uff89\063\uff89\001\002\000\100\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\013\uffc7\014\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\037\uffc7\054" +
    "\uffc7\055\uffc7\062\uffc7\064\uffc7\065\uffc7\071\uffc7\072\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\001\002\000\004\062\263\001" +
    "\002\000\040\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\050\uffb1\051\uffb1\052\uffb1\053\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\060\uffb1\061\uffb1\063\uffb1\001\002\000\042\013\115" +
    "\014\111\025\113\026\105\030\104\031\072\032\131\033" +
    "\140\037\102\054\077\055\uffc0\062\130\072\100\073\075" +
    "\074\106\075\103\001\002\000\004\062\255\001\002\000" +
    "\100\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\013\uffc2" +
    "\014\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\037\uffc2\054\uffc2\055\uffc2\062\uffc2\064\uffc2\065" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\001\002" +
    "\000\050\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\063" +
    "\uff87\001\002\000\004\055\254\001\002\000\052\033\uffef" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff98\043\uff98\044" +
    "\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\055\uff98\057\uff98\060\uff98\062\uff95\066\uffef\001" +
    "\002\000\100\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8" +
    "\013\uffc8\014\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\037\uffc8\054\uffc8\055\uffc8\062\uffc8\064" +
    "\uffc8\065\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\001\002\000\034\042\150\043\156\044\147\045\154\046" +
    "\152\050\161\051\151\052\153\053\160\055\uffc1\057\155" +
    "\060\157\063\uffc1\001\002\000\012\036\244\037\245\040" +
    "\247\041\246\001\002\000\004\062\240\001\002\000\042" +
    "\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\236\050" +
    "\uffb2\051\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\063\uffb2\001\002\000\076\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\013\uffcc\014\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\037\uffcc\054\uffcc" +
    "\055\uffcc\062\uffcc\064\uffcc\065\uffcc\071\uffcc\072\uffcc\073" +
    "\uffcc\074\uffcc\075\uffcc\001\002\000\004\065\uffd0\001\002" +
    "\000\076\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\013" +
    "\uffcb\014\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\037\uffcb\054\uffcb\055\uffcb\062\uffcb\064\uffcb\065\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\001\002\000" +
    "\040\013\115\014\111\025\113\026\105\030\104\031\072" +
    "\032\131\033\140\037\102\054\077\062\130\072\100\073" +
    "\075\074\106\075\103\001\002\000\004\062\227\001\002" +
    "\000\040\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\063\uffb0\001\002\000\076\004\026\005" +
    "\007\006\027\007\023\010\014\013\115\014\111\017\101" +
    "\020\123\021\110\023\112\024\116\025\113\026\105\027" +
    "\136\030\104\031\072\032\131\033\117\037\102\054\077" +
    "\055\uffc0\062\130\064\066\065\uffcd\071\010\072\100\073" +
    "\075\074\106\075\103\001\002\000\100\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\013\uffc5\014\uffc5\017\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\037\uffc5\054" +
    "\uffc5\055\uffc5\062\uffc5\064\uffc5\065\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\001\002\000\004\055\uffca\001" +
    "\002\000\004\062\137\001\002\000\040\013\115\014\111" +
    "\025\113\026\105\030\104\031\072\032\131\033\140\037" +
    "\102\054\077\062\130\072\100\073\075\074\106\075\103" +
    "\001\002\000\054\036\uff99\037\uff99\040\uff99\041\uff99\042" +
    "\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98" +
    "\051\uff98\052\uff98\053\uff98\055\uff98\056\uff98\057\uff98\060" +
    "\uff98\061\uff98\062\uff95\063\uff98\001\002\000\034\042\150" +
    "\043\156\044\147\045\154\046\152\050\161\051\151\052" +
    "\153\053\160\056\uffb5\057\155\060\157\063\uffb5\001\002" +
    "\000\006\056\143\063\144\001\002\000\040\013\115\014" +
    "\111\025\113\026\105\030\104\031\072\032\131\033\140" +
    "\037\102\054\077\062\130\072\100\073\075\074\106\075" +
    "\103\001\002\000\004\055\145\001\002\000\100\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\013\uffb7\014\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\037" +
    "\uffb7\054\uffb7\055\uffb7\062\uffb7\064\uffb7\065\uffb7\071\uffb7" +
    "\072\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000\034\042" +
    "\150\043\156\044\147\045\154\046\152\050\161\051\151" +
    "\052\153\053\160\056\uffb6\057\155\060\157\063\uffb6\001" +
    "\002\000\040\013\115\014\111\025\113\026\105\030\104" +
    "\031\072\032\131\033\140\037\102\054\077\062\130\072" +
    "\100\073\075\074\106\075\103\001\002\000\040\013\115" +
    "\014\111\025\113\026\105\030\104\031\072\032\131\033" +
    "\140\037\102\054\077\062\130\072\100\073\075\074\106" +
    "\075\103\001\002\000\040\013\115\014\111\025\113\026" +
    "\105\030\104\031\072\032\131\033\140\037\102\054\077" +
    "\062\130\072\100\073\075\074\106\075\103\001\002\000" +
    "\040\013\115\014\111\025\113\026\105\030\104\031\072" +
    "\032\131\033\140\037\102\054\077\062\130\072\100\073" +
    "\075\074\106\075\103\001\002\000\040\013\115\014\111" +
    "\025\113\026\105\030\104\031\072\032\131\033\140\037" +
    "\102\054\077\062\130\072\100\073\075\074\106\075\103" +
    "\001\002\000\040\013\115\014\111\025\113\026\105\030" +
    "\104\031\072\032\131\033\140\037\102\054\077\062\130" +
    "\072\100\073\075\074\106\075\103\001\002\000\010\033" +
    "\171\034\167\035\170\001\002\000\040\013\115\014\111" +
    "\025\113\026\105\030\104\031\072\032\131\033\140\037" +
    "\102\054\077\062\130\072\100\073\075\074\106\075\103" +
    "\001\002\000\040\013\115\014\111\025\113\026\105\030" +
    "\104\031\072\032\131\033\140\037\102\054\077\062\130" +
    "\072\100\073\075\074\106\075\103\001\002\000\040\013" +
    "\115\014\111\025\113\026\105\030\104\031\072\032\131" +
    "\033\140\037\102\054\077\062\130\072\100\073\075\074" +
    "\106\075\103\001\002\000\040\013\115\014\111\025\113" +
    "\026\105\030\104\031\072\032\131\033\140\037\102\054" +
    "\077\062\130\072\100\073\075\074\106\075\103\001\002" +
    "\000\040\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\063\uffa4\001\002\000\040\042\uffa1\043" +
    "\uffa1\044\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1" +
    "\053\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\063" +
    "\uffa1\001\002\000\032\042\150\043\156\044\147\045\154" +
    "\046\152\050\161\051\151\052\153\053\160\057\155\060" +
    "\157\061\165\001\002\000\042\042\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\063\uff96" +
    "\001\002\000\040\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\063\uffa8\001\002\000\004\062" +
    "\206\001\002\000\004\062\201\001\002\000\044\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051" +
    "\uff97\052\uff97\053\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\061\uff97\062\173\063\uff97\001\002\000\004\062\173\001" +
    "\002\000\042\013\115\014\111\025\113\026\105\030\104" +
    "\031\072\032\131\033\140\037\102\054\077\062\130\063" +
    "\uff8c\072\100\073\075\074\106\075\103\001\002\000\040" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050\uff91\051" +
    "\uff91\052\uff91\053\uff91\055\uff91\056\uff91\057\uff91\060\uff91" +
    "\061\uff91\063\uff91\001\002\000\004\063\177\001\002\000" +
    "\006\056\143\063\uff8d\001\002\000\040\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\050\uff90\051\uff90\052\uff90\053" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\063\uff90" +
    "\001\002\000\040\042\uff92\043\uff92\044\uff92\045\uff92\046" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\055\uff92\056\uff92" +
    "\057\uff92\060\uff92\061\uff92\063\uff92\001\002\000\040\013" +
    "\115\014\111\025\113\026\105\030\104\031\072\032\131" +
    "\033\140\037\102\054\077\062\130\072\100\073\075\074" +
    "\106\075\103\001\002\000\032\042\150\043\156\044\147" +
    "\045\154\046\152\050\161\051\151\052\153\053\160\056" +
    "\203\057\155\060\157\001\002\000\040\013\115\014\111" +
    "\025\113\026\105\030\104\031\072\032\131\033\140\037" +
    "\102\054\077\062\130\072\100\073\075\074\106\075\103" +
    "\001\002\000\032\042\150\043\156\044\147\045\154\046" +
    "\152\050\161\051\151\052\153\053\160\057\155\060\157" +
    "\063\205\001\002\000\004\062\uff8e\001\002\000\040\013" +
    "\115\014\111\025\113\026\105\030\104\031\072\032\131" +
    "\033\140\037\102\054\077\062\130\072\100\073\075\074" +
    "\106\075\103\001\002\000\032\042\150\043\156\044\147" +
    "\045\154\046\152\050\161\051\151\052\153\053\160\057" +
    "\155\060\157\063\210\001\002\000\004\062\uff8f\001\002" +
    "\000\040\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\063\uffa6\001\002\000\040\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\063" +
    "\uffa2\001\002\000\040\042\uffa5\043\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\063\uffa5\001\002\000\040" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\063\uffa3\001\002\000\040\042\uffaa\043\156\044" +
    "\147\045\154\046\152\050\161\051\151\052\153\053\160" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\063\uffaa\001" +
    "\002\000\040\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\063\uffa7\001\002\000\004\062\220" +
    "\001\002\000\042\013\115\014\111\025\113\026\105\030" +
    "\104\031\072\032\131\033\140\037\102\054\077\062\130" +
    "\063\uff8c\072\100\073\075\074\106\075\103\001\002\000" +
    "\004\063\uff94\001\002\000\004\063\223\001\002\000\040" +
    "\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051" +
    "\uff93\052\uff93\053\uff93\055\uff93\056\uff93\057\uff93\060\uff93" +
    "\061\uff93\063\uff93\001\002\000\004\055\225\001\002\000" +
    "\100\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\013\uffc9" +
    "\014\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\037\uffc9\054\uffc9\055\uffc9\062\uffc9\064\uffc9\065" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002" +
    "\000\004\065\uffce\001\002\000\040\013\115\014\111\025" +
    "\113\026\105\030\104\031\072\032\131\033\140\037\102" +
    "\054\077\062\130\072\100\073\075\074\106\075\103\001" +
    "\002\000\032\042\150\043\156\044\147\045\154\046\152" +
    "\050\161\051\151\052\153\053\160\057\155\060\157\063" +
    "\231\001\002\000\040\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\061\uff9b\063\uff9b\001\002\000\032" +
    "\042\150\043\156\044\147\045\154\046\152\050\161\051" +
    "\151\052\153\053\160\057\155\060\157\063\233\001\002" +
    "\000\040\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\063\uffaf\001\002\000\004\065\235\001" +
    "\002\000\110\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\037" +
    "\uffcf\054\uffcf\055\uffcf\062\uffcf\064\uffcf\065\uffcf\071\uffcf" +
    "\072\uffcf\073\uffcf\074\uffcf\075\uffcf\001\002\000\040\013" +
    "\115\014\111\025\113\026\105\030\104\031\072\032\131" +
    "\033\140\037\102\054\077\062\130\072\100\073\075\074" +
    "\106\075\103\001\002\000\040\042\150\043\156\044\147" +
    "\045\154\046\152\050\161\051\151\052\153\053\160\055" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\063\uffb4\001\002" +
    "\000\040\013\115\014\111\025\113\026\105\030\104\031" +
    "\072\032\131\033\140\037\102\054\077\062\130\072\100" +
    "\073\075\074\106\075\103\001\002\000\032\042\150\043" +
    "\156\044\147\045\154\046\152\050\161\051\151\052\153" +
    "\053\160\057\155\060\157\063\242\001\002\000\060\013" +
    "\115\014\111\017\101\020\123\021\110\023\112\024\116" +
    "\025\113\026\105\027\136\030\104\031\072\032\131\033" +
    "\140\037\102\054\077\055\uffc0\062\130\064\066\072\100" +
    "\073\075\074\106\075\103\001\002\000\100\004\uffbc\005" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\013\uffbc\014\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\037\uffbc" +
    "\054\uffbc\055\uffbc\062\uffbc\064\uffbc\065\uffbc\071\uffbc\072" +
    "\uffbc\073\uffbc\074\uffbc\075\uffbc\001\002\000\040\013\115" +
    "\014\111\025\113\026\105\030\104\031\072\032\131\033" +
    "\140\037\102\054\077\062\130\072\100\073\075\074\106" +
    "\075\103\001\002\000\040\013\115\014\111\025\113\026" +
    "\105\030\104\031\072\032\131\033\140\037\102\054\077" +
    "\062\130\072\100\073\075\074\106\075\103\001\002\000" +
    "\040\013\115\014\111\025\113\026\105\030\104\031\072" +
    "\032\131\033\140\037\102\054\077\062\130\072\100\073" +
    "\075\074\106\075\103\001\002\000\040\013\115\014\111" +
    "\025\113\026\105\030\104\031\072\032\131\033\140\037" +
    "\102\054\077\062\130\072\100\073\075\074\106\075\103" +
    "\001\002\000\040\042\uffac\043\156\044\147\045\154\046" +
    "\152\050\161\051\151\052\153\053\160\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\063\uffac\001\002\000\040\042" +
    "\uffab\043\156\044\147\045\154\046\152\050\161\051\151" +
    "\052\153\053\160\055\uffab\056\uffab\057\uffab\060\uffab\061" +
    "\uffab\063\uffab\001\002\000\040\042\uffad\043\156\044\147" +
    "\045\154\046\152\050\161\051\151\052\153\053\160\055" +
    "\uffad\056\uffad\057\uffad\060\uffad\061\uffad\063\uffad\001\002" +
    "\000\040\042\uffae\043\156\044\147\045\154\046\152\050" +
    "\161\051\151\052\153\053\160\055\uffae\056\uffae\057\uffae" +
    "\060\uffae\061\uffae\063\uffae\001\002\000\100\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\013\uffb8\014\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\037\uffb8" +
    "\054\uffb8\055\uffb8\062\uffb8\064\uffb8\065\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000\004\033\256" +
    "\001\002\000\004\063\257\001\002\000\040\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\063" +
    "\uff9f\001\002\000\004\055\uffba\001\002\000\004\055\262" +
    "\001\002\000\100\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\013\uffb9\014\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\037\uffb9\054\uffb9\055\uffb9\062\uffb9" +
    "\064\uffb9\065\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075" +
    "\uffb9\001\002\000\040\013\115\014\111\025\113\026\105" +
    "\030\104\031\072\032\131\033\140\037\102\054\077\062" +
    "\130\072\100\073\075\074\106\075\103\001\002\000\032" +
    "\042\150\043\156\044\147\045\154\046\152\050\161\051" +
    "\151\052\153\053\160\057\155\060\157\063\265\001\002" +
    "\000\060\013\115\014\111\017\101\020\123\021\110\023" +
    "\112\024\116\025\113\026\105\027\136\030\104\031\072" +
    "\032\131\033\140\037\102\054\077\055\uffc0\062\130\064" +
    "\066\072\100\073\075\074\106\075\103\001\002\000\100" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\013\uffbd\014" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\022\267\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\037\uffbd\054\uffbd\055\uffbd\062\uffbd\064\uffbd\065\uffbd" +
    "\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\001\002\000" +
    "\060\013\115\014\111\017\101\020\123\021\110\023\112" +
    "\024\116\025\113\026\105\027\136\030\104\031\072\032" +
    "\131\033\140\037\102\054\077\055\uffc0\062\130\064\066" +
    "\072\100\073\075\074\106\075\103\001\002\000\100\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\013\uffbf\014\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\037\uffbf\054\uffbf\055\uffbf\062\uffbf\064\uffbf\065\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000\100" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\013\uffbe\014" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\037\uffbe\054\uffbe\055\uffbe\062\uffbe\064\uffbe\065\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002\000" +
    "\040\013\115\014\111\025\113\026\105\030\104\031\072" +
    "\032\131\033\140\037\102\054\077\062\130\072\100\073" +
    "\075\074\106\075\103\001\002\000\032\042\150\043\156" +
    "\044\147\045\154\046\152\050\161\051\151\052\153\053" +
    "\160\056\274\057\155\060\157\001\002\000\016\004\026" +
    "\005\007\006\027\007\023\010\014\033\006\001\002\000" +
    "\006\063\276\066\051\001\002\000\040\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\063\uff9e" +
    "\001\002\000\004\063\300\001\002\000\040\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\063" +
    "\uff9d\001\002\000\040\042\uffa9\043\156\044\147\045\154" +
    "\046\152\050\161\051\151\052\153\053\160\055\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9\001\002\000\042" +
    "\013\115\014\111\025\113\026\105\030\104\031\072\032" +
    "\131\033\140\037\102\054\077\055\uffc0\062\130\072\100" +
    "\073\075\074\106\075\103\001\002\000\004\055\304\001" +
    "\002\000\040\013\115\014\111\025\113\026\105\030\104" +
    "\031\072\032\131\033\140\037\102\054\077\062\130\072" +
    "\100\073\075\074\106\075\103\001\002\000\032\042\150" +
    "\043\156\044\147\045\154\046\152\050\161\051\151\052" +
    "\153\053\160\055\306\057\155\060\157\001\002\000\042" +
    "\013\115\014\111\025\113\026\105\030\104\031\072\032" +
    "\131\033\140\037\102\054\077\062\130\063\uffc0\072\100" +
    "\073\075\074\106\075\103\001\002\000\004\063\310\001" +
    "\002\000\060\013\115\014\111\017\101\020\123\021\110" +
    "\023\112\024\116\025\113\026\105\027\136\030\104\031" +
    "\072\032\131\033\140\037\102\054\077\055\uffc0\062\130" +
    "\064\066\072\100\073\075\074\106\075\103\001\002\000" +
    "\100\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\013\uffbb" +
    "\014\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\033\uffbb\037\uffbb\054\uffbb\055\uffbb\062\uffbb\064\uffbb\065" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\001\002" +
    "\000\040\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\063\uffa0\001\002\000\004\063\314\001" +
    "\002\000\040\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\055\uff9c\056\uff9c\057" +
    "\uff9c\060\uff9c\061\uff9c\063\uff9c\001\002\000\004\055\316" +
    "\001\002\000\106\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\037\ufff7" +
    "\054\ufff7\055\ufff7\062\ufff7\064\ufff7\065\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\001\002\000\010\015\321" +
    "\016\uffe1\064\uffe1\001\002\000\006\016\uffe4\064\uffe4\001" +
    "\002\000\004\033\322\001\002\000\006\016\uffe2\064\uffe2" +
    "\001\002\000\006\016\325\064\uffdf\001\002\000\004\064" +
    "\332\001\002\000\004\033\327\001\002\000\006\056\330" +
    "\064\uffe0\001\002\000\006\056\uffdd\064\uffdd\001\002\000" +
    "\004\033\331\001\002\000\006\056\uffde\064\uffde\001\002" +
    "\000\022\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\033" +
    "\uffdb\065\uffdb\071\uffdb\001\002\000\022\004\026\005\007" +
    "\006\027\007\023\010\014\033\006\065\335\071\010\001" +
    "\002\000\022\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\033\uffda\065\uffda\071\uffda\001\002\000\030\002\uffe3\003" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\033\uffe3\071\uffe3\001\002\000\022\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\033\uffdc\065\uffdc\071\uffdc" +
    "\001\002\000\022\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\033\uffd9\065\uffd9\071\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\002\003\001\001\000\022\003\010\004" +
    "\023\005\020\006\012\007\021\011\011\013\015\040\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\314\006\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\031\001" +
    "\001\000\002\001\001\000\004\045\033\001\001\000\006" +
    "\006\034\014\037\001\001\000\004\037\054\001\001\000" +
    "\002\001\001\000\004\037\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\043\047" +
    "\044\001\001\000\002\001\001\000\006\005\046\006\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\060\001\001\000\002\001\001" +
    "\000\006\010\062\047\044\001\001\000\004\054\063\001" +
    "\001\000\002\001\001\000\004\015\066\001\001\000\004" +
    "\057\067\001\001\000\002\001\001\000\050\004\124\005" +
    "\020\006\045\015\113\016\126\017\117\020\106\021\073" +
    "\022\070\023\133\024\075\025\120\026\121\027\123\030" +
    "\131\033\072\041\134\050\132\051\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\311" +
    "\026\121\027\123\030\131\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\300\026\121\027\123" +
    "\030\131\033\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\025\120\026" +
    "\121\027\123\030\131\033\072\041\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\233\001\001\000\002" +
    "\001\001\000\014\025\231\026\121\027\123\030\131\033" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\004\124\005\020\006\045\015\113\016\126\017\117\020" +
    "\106\021\073\022\070\023\133\024\075\025\120\026\121" +
    "\027\123\030\131\033\072\041\134\050\132\051\225\001" +
    "\001\000\002\001\001\000\004\061\223\001\001\000\002" +
    "\001\001\000\016\025\140\026\121\027\123\030\131\033" +
    "\072\042\141\001\001\000\004\063\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\145\026\121\027" +
    "\123\030\131\033\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\215\026\121\027" +
    "\123\030\131\033\072\001\001\000\014\025\214\026\121" +
    "\027\123\030\131\033\072\001\001\000\014\025\213\026" +
    "\121\027\123\030\131\033\072\001\001\000\014\025\212" +
    "\026\121\027\123\030\131\033\072\001\001\000\014\025" +
    "\211\026\121\027\123\030\131\033\072\001\001\000\014" +
    "\025\210\026\121\027\123\030\131\033\072\001\001\000" +
    "\004\031\171\001\001\000\014\025\165\026\121\027\123" +
    "\030\131\033\072\001\001\000\014\025\163\026\121\027" +
    "\123\030\131\033\072\001\001\000\014\025\162\026\121" +
    "\027\123\030\131\033\072\001\001\000\014\025\161\026" +
    "\121\027\123\030\131\033\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\177\001\001\000\004\046\173\001\001\000\020\025" +
    "\140\026\121\027\123\030\131\032\174\033\072\042\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\201" +
    "\026\121\027\123\030\131\033\072\001\001\000\002\001" +
    "\001\000\014\025\203\026\121\027\123\030\131\033\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\206\026\121\027\123\030\131\033\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\025\140\026" +
    "\121\027\123\030\131\032\220\033\072\042\175\001\001" +
    "\000\004\064\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\025\227\026\121\027\123\030\131\033\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\236\026\121\027\123\030\131\033\072\001\001" +
    "\000\002\001\001\000\014\025\240\026\121\027\123\030" +
    "\131\033\072\001\001\000\002\001\001\000\036\015\113" +
    "\016\242\017\117\020\106\021\073\022\070\023\133\024" +
    "\075\025\120\026\121\027\123\030\131\033\072\041\134" +
    "\001\001\000\002\001\001\000\014\025\252\026\121\027" +
    "\123\030\131\033\072\001\001\000\014\025\251\026\121" +
    "\027\123\030\131\033\072\001\001\000\014\025\250\026" +
    "\121\027\123\030\131\033\072\001\001\000\014\025\247" +
    "\026\121\027\123\030\131\033\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\263\026\121\027\123\030" +
    "\131\033\072\001\001\000\002\001\001\000\036\015\113" +
    "\016\265\017\117\020\106\021\073\022\070\023\133\024" +
    "\075\025\120\026\121\027\123\030\131\033\072\041\134" +
    "\001\001\000\004\043\267\001\001\000\036\015\113\016" +
    "\270\017\117\020\106\021\073\022\070\023\133\024\075" +
    "\025\120\026\121\027\123\030\131\033\072\041\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\025\272" +
    "\026\121\027\123\030\131\033\072\001\001\000\002\001" +
    "\001\000\004\006\274\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\025\120\026\121\027\123\030\131\033\072" +
    "\041\302\001\001\000\002\001\001\000\014\025\304\026" +
    "\121\027\123\030\131\033\072\001\001\000\002\001\001" +
    "\000\016\025\120\026\121\027\123\030\131\033\072\041" +
    "\306\001\001\000\002\001\001\000\036\015\113\016\310" +
    "\017\117\020\106\021\073\022\070\023\133\024\075\025" +
    "\120\026\121\027\123\030\131\033\072\041\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\317\001\001\000\004\055\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\323\001\001\000\002" +
    "\001\001\000\004\036\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\332\001\001\000\016\004\333\005\020\006\012\007" +
    "\336\012\335\040\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error ");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            m.append("Sintactico: simbolo: " + s.value.toString()+ " no reconocido.");
            if (s.left >= 0) {                
                m.append(" linea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }        
        System.err.println(m);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            System.out.println("\n*** Resultados finales ***");
            Sintaxis asin = new Sintaxis(
                    new Lexer( new FileReader(args[0])));
            Object result = asin.parse().value;            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Constant ::= NULL 
            {
              Object RESULT =null;
		RESULT = "&null"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Constant ::= stringConstant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e + "&str"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Constant ::= boolConstant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e + "&bool"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Constant ::= doubleConstant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e + "&dob"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Constant ::= intConstant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e + "&int"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Constant",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Actuals",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Actuals ::= ExprPrint 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		System.out.println(n); RESULT=n;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Actuals",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LibCall ::= SETBYTE LPAR Expr COMMA Expr RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LibCall",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LibCall ::= GETBYTE LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LibCall",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CallCont ::= LPAR Actuals RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CallCont",36, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Call ::= Expr PERIOD LibCall CallCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Call ::= Expr PERIOD IDENT CallCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Call ::= IDENT NT$8 LPAR Actuals NT$9 RPAR 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Call",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
Env.tipos(n.toString(),n1.toString());
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$8 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
if(!Env.get_name(n.toString(), "m")){ System.out.println("***WARNING*** ==> Método: " + n + " no ha sido declarado");}
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LValue ::= Expr LCOR Expr RCOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LValue ::= Expr PERIOD IDENT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LValue ::= IDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LValue",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr1 ::= IDENT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr1",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr1 ::= Constant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr1",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= MALLOC LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= READLINE LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= READINTEGER LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= NEWARRAY LPAR Expr COMMA Type RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= NEW LPAR IDENT RPAR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= EXCLAM Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr AMPERSONS Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr NOTEQ Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr EQTO Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr GREATEREQ Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr GREATER Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr LESSEQ Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr LESS Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr MOD Expr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr1 DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "/" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr1 TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "*" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr1 MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "-" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr1 PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e1 + "+" + e2; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = p;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Call 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= THIS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= LValue 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Constant 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = e; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= LValue EQUALS Expr 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 
    Env.Validar(v.toString(), e.toString());

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Expr",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExprPrint ::= Expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		RESULT=n.toString();
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ExprPrint",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExprPrint ::= ExprPrint COMMA Expr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		a = a.toString().concat(","+b.toString()); RESULT = a;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ExprPrint",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PrintStmt ::= PRINT LPAR ExprPrint RPAR SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PrintStmt",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BreakStmt ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("BreakStmt",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ReturnStmt ::= RETURN StmtExpr NT$7 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ReturnStmt",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$7 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
RESULT = p;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ForStmt ::= FOR LPAR StmtExpr SEMI Expr SEMI StmtExpr RPAR Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ForStmt",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WhileStmt ::= WHILE LPAR Expr RPAR Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WhileStmt",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ElseIfStmt ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ElseIfStmt ::= ELSE Stmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ElseIfStmt",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IfStmt ::= IF LPAR Expr RPAR Stmt ElseIfStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IfStmt",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StmtExpr ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtExpr",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StmtExpr ::= Expr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		RESULT=n;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtExpr",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= StmtBlock 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= PrintStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= ReturnStmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		RESULT = p;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= BreakStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= ForStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= WhileStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= IfStmt 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= StmtExpr NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Stmt",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$6 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
RESULT=m;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StmtEnd ::= Stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		RESULT = p;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtEnd",38, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StmtEnd ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtEnd",38, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StmtCont ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtCont",39, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StmtCont ::= StmtEnd StmtCont 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		if(p!=null){if(q==null){q="";q = q.toString().concat(p.toString());}else {q = q.toString().concat(p.toString());}}; RESULT = q; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtCont",39, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StmtBlock ::= LLLAV NT$4 StmtCont NT$5 RLLAV 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("StmtBlock",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
RESULT=p;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$4 ::= 
            {
              Object RESULT =null;
System.out.print(" BLOCK ENTRY"); Env.push(); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ProtCont ::= IDENT LPAR Formals RPAR SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ProtCont",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Prototype ::= VOID ProtCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Prototype ::= Type ProtCont 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Prototype",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InterfaceProt ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceProt",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InterfaceProt ::= InterfaceProt Prototype 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceProt",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InterfaceDecl ::= INTERFACE IDENT NT$3 LLLAV InterfaceProt RLLAV 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("InterfaceDecl",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$3 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
 if(Env.putClass(n1.toString(),null,null) != 0) System.out.println("  La interfaz " + n1 + " ya ha sido declarada en el ambito actual"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Field ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Field ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Field",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassField ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassField",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassField ::= ClassField Field 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassField",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ImpID ::= IDENT 
            {
              Object RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		

    if(n3 == null)
    {
        
    }
    else
    {   
        boolean R = Env.getInterfaces(n3.toString());

        if(R == false)
        {
            System.out.println("  La interfaz " + n3 + " no existe en el ambito actual");
        }
    }
 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ImpID",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ImpID ::= ImpID COMMA IDENT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ImpID",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Imp ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Imp",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Imp ::= IMPLEMENTS ImpID 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Imp",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ext ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Ext",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ext ::= EXTENDS IDENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = n1; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Ext",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassDecl ::= CLASS IDENT Ext NT$2 Imp LLLAV ClassField RLLAV 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)).value;
		
      System.out.print("  Saliendo de la clase: "+n1);
      Env.pop();
 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ClassDecl",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;

    if(n2 == null)
    {
        if(Env.putClass(n1.toString(),null,null) != 0)
        {
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
        }
    }
    else
    {
        switch(Env.putClass(n1.toString(),n2.toString(),null))
        {
            case 1:
            System.out.println("  La clase " + n1 + " ya ha sido declarada en el ambito actual");
            break;

            case 2:
            System.out.println("  La clase " + n2 + " no existe en el ambito actual");
            break;                
        } 
    }

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FormalsCont ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FormalsCont",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FormalsCont ::= FormalsCont Variable COMMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		if(a==null){a="";}; a = a.toString().concat(b+"-"); RESULT = a;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FormalsCont",37, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Formals ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Formals ::= FormalsCont Variable 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 if(a==null){a="";a = a.toString().concat(b.toString());}else{a = a.toString().concat(b.toString());} RESULT = a; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Formals",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FuncCont ::= Type IDENT NT$0 LPAR Formals NT$1 RPAR StmtBlock 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		Env.mreturn(t.toString(),v);System.out.print(" BLOCK EXIT"); Env.pop();System.out.print(" METHOD EXIT" +n); Env.pop();
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FuncCont",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
Env.parametros(n.toString(),p);
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
 if(!Env.put(n.toString(),"m",t)) {System.out.println("Nombre de metodo ya existe");} else {System.out.print(" METHOD ENTRY: "+n); Env.push();}
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionDecl ::= FuncCont 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FunctionDecl",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= Type CORS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= VOID 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= IDENT 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = n1.toString(); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VarConstant ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VarConstant",40, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VarConstant ::= CONSTANT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VarConstant",40, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variable ::= Type IDENT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.peek()).value;
		 RESULT = ""; RESULT=RESULT.toString().concat("["+I+","+t+"]");if (!Env.put(I,"v",t))  System.out.println("  La variable " + I + " ya ha sido declarada en el ambito actual"); 
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Variable",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDecl ::= CONSTANT Variable SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VariableDecl ::= Variable SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("VariableDecl",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= error RLLAV 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= error SEMI 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= InterfaceDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= VariableDecl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program Decl 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

